 tasks.c  |  2 +-
 timers.c | 16 ++++++++--------
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/tasks.c b/tasks.c
index 2c169d5b5..d8c5065c7 100644
--- a/tasks.c
+++ b/tasks.c
@@ -2086,7 +2086,7 @@ void vTaskStartScheduler( void )
 
     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
      * from getting optimized out as it is no longer used by the kernel. */
-    ( void ) uxTopUsedPriority;
+    // ( void ) uxTopUsedPriority;
 }
 /*-----------------------------------------------------------*/
 
diff --git a/timers.c b/timers.c
index c78c93443..ce8bf8564 100644
--- a/timers.c
+++ b/timers.c
@@ -328,7 +328,7 @@
                  * structure. */
                 volatile size_t xSize = sizeof( StaticTimer_t );
                 configASSERT( xSize == sizeof( Timer_t ) );
-                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
+//                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
             }
             #endif /* configASSERT_DEFINED */
 
@@ -570,7 +570,7 @@
         /* Remove the timer from the list of active timers.  A check has already
          * been performed to ensure the list is not empty. */
 
-        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
+/*        ( void )*/ uxListRemove( &( pxTimer->xTimerListItem ) );
 
         /* If the timer is an auto-reload timer then calculate the next
          * expiry time and re-insert the timer in the list of active timers. */
@@ -595,7 +595,7 @@
         BaseType_t xListWasEmpty;
 
         /* Just to avoid compiler warnings. */
-        ( void ) pvParameters;
+//        ( void ) pvParameters;
 
         #if ( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
         {
@@ -643,7 +643,7 @@
                 /* The tick count has not overflowed, has the timer expired? */
                 if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
                 {
-                    ( void ) xTaskResumeAll();
+/*                    ( void )*/ xTaskResumeAll();
                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
                 }
                 else
@@ -679,7 +679,7 @@
             }
             else
             {
-                ( void ) xTaskResumeAll();
+/*                ( void )*/ xTaskResumeAll();
             }
         }
     }
@@ -821,7 +821,7 @@
                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
                 {
                     /* The timer is in a list, remove it. */
-                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
+/*                    ( void )*/ uxListRemove( &( pxTimer->xTimerListItem ) );
                 }
                 else
                 {
@@ -889,7 +889,7 @@
                          * be zero the next expiry time can only be in the future,
                          * meaning (unlike for the xTimerStart() case above) there is
                          * no fail case that needs to be handled here. */
-                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
+/*                        ( void )*/ prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
                         break;
 
                     case tmrCOMMAND_DELETE:
@@ -971,7 +971,7 @@
                     /* The timer queue is allocated statically in case
                      * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                     PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
-                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
+                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
 
                     xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                 }