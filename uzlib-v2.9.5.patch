From ef150ca6ce06aede6cce71c611a74fe69fcfa33f Mon Sep 17 00:00:00 2001
From: Paul Sokolovsky <pfalcon@users.sourceforge.net>
Date: Thu, 8 Apr 2021 10:03:15 +0300
Subject: [PATCH 1/8] uzlib.h: Fix position of opening 'extern "C"' bracket.

Should wrap all of uzlib headers.

Signed-off-by: Paul Sokolovsky <pfalcon@users.sourceforge.net>
---
 src/uzlib.h | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/uzlib.h b/src/uzlib.h
index 3a4a1ad..00e5e3d 100644
--- a/src/uzlib.h
+++ b/src/uzlib.h
@@ -39,6 +39,10 @@
 #include <stdint.h>
 #include <stdbool.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #include "defl_static.h"
 
 #include "uzlib_conf.h"
@@ -55,10 +59,6 @@
  #endif
 #endif
 
-#ifdef __cplusplus
-extern "C" {
-#endif
-
 /* ok status, more data produced */
 #define TINF_OK             0
 /* end of compressed stream reached */
-- 
2.41.0


From 5e2d27a0cc62d2be6e5ece86b1eb34dcf145d0de Mon Sep 17 00:00:00 2001
From: Paul Sokolovsky <pfalcon@users.sourceforge.net>
Date: Sun, 9 May 2021 23:26:41 +0300
Subject: [PATCH 2/8] .github/workflows/stale.yml: Action to close stale
 tickets.

Signed-off-by: Paul Sokolovsky <pfalcon@users.sourceforge.net>
---
 .github/workflows/stale.yml | 67 +++++++++++++++++++++++++++++++++++++
 1 file changed, 67 insertions(+)
 create mode 100644 .github/workflows/stale.yml

diff --git a/.github/workflows/stale.yml b/.github/workflows/stale.yml
new file mode 100644
index 0000000..119274c
--- /dev/null
+++ b/.github/workflows/stale.yml
@@ -0,0 +1,67 @@
+name: "Close stale tickets"
+on:
+  schedule:
+    - cron: "0 22 * * *"
+
+jobs:
+  stale:
+    runs-on: ubuntu-latest
+    steps:
+    - uses: actions/stale@v3
+      with:
+        days-before-stale: 15
+        days-before-close: 15
+        exempt-issue-labels: triaged
+        exempt-pr-labels: triaged,contrib
+        stale-issue-message: |
+            Thanks for your submission. However there was no (further) activity
+            on it for some time. Below are possible reasons and/or means to
+            proceed further:
+
+            * Please make sure that your submission contains clear and complete
+            description of the issue and information required to understand and
+            reproduce it (exact version of all components involved, etc.). Please
+            refer to numerous guides on submitting helpful bugreports, e.g.
+            https://www.chiark.greenend.org.uk/~sgtatham/bugs.html
+
+            * Please make sure that your feature request/suggestion/change aligns
+            well with the project purpose, goals, and process.
+
+            * If you face the issue you report while working on a community-oriented
+            open-source project, feel free to provide additional context and
+            information - that may help to prioritize the issue better.
+
+            * As many open-source projects, this project is severely under-staffed
+            and under-resourced. If you don't run a community-oriented open-source
+            project, and would like to get additional support/maintenance, feel
+            free to request a support contract.
+
+            Thanks for your understanding!
+        stale-pr-message: |
+            Thanks for your submission. However there was no (further) activity
+            on it for some time. Below are possible reasons and/or means to
+            proceed further:
+
+            * Please make sure that your submission contains clear and complete
+            description of the issue and information required to understand and
+            reproduce it (exact version of all components involved, etc.). Please
+            refer to numerous guides on submitting helpful bugreports, e.g.
+            https://www.chiark.greenend.org.uk/~sgtatham/bugs.html
+
+            * Please make sure that your feature request/suggestion/change aligns
+            well with the project purpose, goals, and process.
+
+            * If you face the issue you report while working on a community-oriented
+            open-source project, feel free to provide additional context and
+            information - that may help to prioritize the issue better.
+
+            * As many open-source projects, this project is severely under-staffed
+            and under-resourced. If you don't run a community-oriented open-source
+            project, and would like to get additional support/maintenance, feel
+            free to request a support contract.
+
+            Thanks for your understanding!
+        close-issue-message: >
+            Closing due to inactivity.
+        close-pr-message: >
+            Closing due to inactivity.
-- 
2.41.0


From 5a493dd02e39dab707b5cfb00622ef9fa4145240 Mon Sep 17 00:00:00 2001
From: Paul Sokolovsky <pfalcon@users.sourceforge.net>
Date: Mon, 10 May 2021 23:02:27 +0300
Subject: [PATCH 3/8] README: Add "API and configuration" section.

Signed-off-by: Paul Sokolovsky <pfalcon@users.sourceforge.net>
---
 README.md | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/README.md b/README.md
index 4e09223..f965870 100644
--- a/README.md
+++ b/README.md
@@ -82,6 +82,21 @@ Currently, compressor doesn't support streaming operation, both input and
 output must reside in memory. Neither it supports incremental operation,
 entire input buffer is compressed at once with a single call to uzlib.
 
+API and configuration
+---------------------
+
+The API is defined in the file [uzlib.h](src/uzlib.h) and should be largely
+self-describing. There are also examples implementing gzip-compatible
+compression and decompression applications in [examples/](examples/) for
+further reference. (You may also refer to the original `tinf` README
+below for additional information, but it's mostly provided for
+historical reference, and `uzlib` largely evolved beyond it).
+
+There are some compile-time options for the library, defined in
+the file [uzlib_conf.h](src/uzlib_conf.h). They can be altered directly
+in the file, or passed as the compiler options (`-DXXX=YYY`) when
+building library.
+
 Binary sizes
 ------------
 
-- 
2.41.0


From 8e0033fb78e3356a6ba735f3b51ae19646d1429b Mon Sep 17 00:00:00 2001
From: Paul Sokolovsky <pfalcon@users.sourceforge.net>
Date: Tue, 1 Jun 2021 15:16:54 +0300
Subject: [PATCH 4/8] README: Emphasize that tinf README is including only for
 historical ref

A lot of information in it no longer applies to uzlib.

Signed-off-by: Paul Sokolovsky <pfalcon@users.sourceforge.net>
---
 README.md | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/README.md b/README.md
index f965870..97c8713 100644
--- a/README.md
+++ b/README.md
@@ -129,8 +129,11 @@ arm-none-eabi-gcc (GNU Tools for Arm Embedded Processors 9-2019-q4-major) 9.2.1
 Original tinf library README
 ============================
 
-For reference, the original "tinf" library README follows. NOTE: Some
-parts may no longer apply to uzlib.
+*For historical reference and to provide proper credit, the original `tinf`
+library README follows. NOTE: Many parts no longer apply to `uzlib`. In
+particular, API is different, features supported are largely extended,
+and during decompression, there are checks to avoid erroneous/undefined
+behavior on incorrect Deflate bitstreams.*
 
 tinf - tiny inflate library
 ===========================
-- 
2.41.0


From 6e345aa3e7abf766031df62bab4bf1573de17e70 Mon Sep 17 00:00:00 2001
From: Paul Sokolovsky <pfalcon@users.sourceforge.net>
Date: Sat, 13 Nov 2021 18:20:53 +0300
Subject: [PATCH 5/8] README: compressor: Hashtable size, ptr, and dict size
 are configurable.

These features were implemented some time ago.

Signed-off-by: Paul Sokolovsky <pfalcon@users.sourceforge.net>
---
 README.md | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/README.md b/README.md
index 97c8713..41dfa5d 100644
--- a/README.md
+++ b/README.md
@@ -72,11 +72,8 @@ Compressor features
 
 Compressor uses very basic implementation of LZ77 algorithm using hash
 table to find repeating substrings. The size of the hash table (on which
-compression efficiency depends) is currently hardcoded at the compile-time.
-Likewise, the size of LZ77 dictionary is also hardcoded at compile time.
-Both settings should be made runtime-configurable. The hash table is
-allocated on the stack, instead it should be allocated by user and passed
-as an argument to the function (dependency injection pattern).
+compression efficiency depends), pointer to the hashtable memory, and
+the size of LZ77 dictionary should be configured in `struct uzlib_comp`.
 
 Currently, compressor doesn't support streaming operation, both input and
 output must reside in memory. Neither it supports incremental operation,
-- 
2.41.0


From fb9dbb17887632275c5fbfe60645d92154eb796b Mon Sep 17 00:00:00 2001
From: Paul Sokolovsky <pfalcon@users.sourceforge.net>
Date: Sun, 14 Nov 2021 14:06:20 +0300
Subject: [PATCH 6/8] defl_static: Merge `struct Outbuf` into `struct
 uzlib_comp`.

Now struct uzlib_comp is passed to all functions in defl_static module.
This will allow to add to it other members to implement additional
functionality and access them from these functions.

Signed-off-by: Paul Sokolovsky <pfalcon@users.sourceforge.net>
---
 src/defl_static.c | 11 ++++++-----
 src/defl_static.h | 18 +++++-------------
 src/uzlib.h       | 10 +++++++---
 3 files changed, 18 insertions(+), 21 deletions(-)

diff --git a/src/defl_static.c b/src/defl_static.c
index 522d485..d6578b2 100644
--- a/src/defl_static.c
+++ b/src/defl_static.c
@@ -34,6 +34,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include <stdint.h>
 #include <string.h>
 #include <assert.h>
+#include "uzlib.h"
 #include "defl_static.h"
 
 #define snew(type) ( (type *) malloc(sizeof(type)) )
@@ -60,7 +61,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  * having to transmit the trees.
  */
 
-void outbits(struct Outbuf *out, unsigned long bits, int nbits)
+void outbits(struct uzlib_comp *out, unsigned long bits, int nbits)
 {
     assert(out->noutbits + nbits <= 32);
     out->outbits |= bits << out->noutbits;
@@ -189,7 +190,7 @@ static const dist_coderecord distcodes[] = {
     {29, 13, 24577, 32768},
 };
 
-void zlib_literal(struct Outbuf *out, unsigned char c)
+void zlib_literal(struct uzlib_comp *out, unsigned char c)
 {
     if (out->comp_disabled) {
         /*
@@ -208,7 +209,7 @@ void zlib_literal(struct Outbuf *out, unsigned char c)
     }
 }
 
-void zlib_match(struct Outbuf *out, int distance, int len)
+void zlib_match(struct uzlib_comp *out, int distance, int len)
 {
     const dist_coderecord *d;
     const len_coderecord *l;
@@ -303,14 +304,14 @@ void zlib_match(struct Outbuf *out, int distance, int len)
     }
 }
 
-void zlib_start_block(struct Outbuf *out)
+void zlib_start_block(struct uzlib_comp *out)
 {
 //    outbits(out, 0x9C78, 16);
     outbits(out, 1, 1); /* Final block */
     outbits(out, 1, 2); /* Static huffman block */
 }
 
-void zlib_finish_block(struct Outbuf *out)
+void zlib_finish_block(struct uzlib_comp *out)
 {
     outbits(out, 0, 7); /* close block */
     outbits(out, 0, 7); /* Make sure all bits are flushed */
diff --git a/src/defl_static.h b/src/defl_static.h
index 292734d..cdfa973 100644
--- a/src/defl_static.h
+++ b/src/defl_static.h
@@ -30,16 +30,8 @@
    They may be altered/distinct from the originals used in PuTTY source
    code. */
 
-struct Outbuf {
-    unsigned char *outbuf;
-    int outlen, outsize;
-    unsigned long outbits;
-    int noutbits;
-    int comp_disabled;
-};
-
-void outbits(struct Outbuf *out, unsigned long bits, int nbits);
-void zlib_start_block(struct Outbuf *ctx);
-void zlib_finish_block(struct Outbuf *ctx);
-void zlib_literal(struct Outbuf *ectx, unsigned char c);
-void zlib_match(struct Outbuf *ectx, int distance, int len);
+void outbits(struct uzlib_comp *ctx, unsigned long bits, int nbits);
+void zlib_start_block(struct uzlib_comp *ctx);
+void zlib_finish_block(struct uzlib_comp *ctx);
+void zlib_literal(struct uzlib_comp *ctx, unsigned char c);
+void zlib_match(struct uzlib_comp *ctx, int distance, int len);
diff --git a/src/uzlib.h b/src/uzlib.h
index 00e5e3d..681ad74 100644
--- a/src/uzlib.h
+++ b/src/uzlib.h
@@ -43,8 +43,6 @@
 extern "C" {
 #endif
 
-#include "defl_static.h"
-
 #include "uzlib_conf.h"
 #if UZLIB_CONF_DEBUG_LOG
 #include <stdio.h>
@@ -146,7 +144,11 @@ int TINFCC uzlib_gzip_parse_header(TINF_DATA *d);
 typedef const uint8_t *uzlib_hash_entry_t;
 
 struct uzlib_comp {
-    struct Outbuf out;
+    unsigned char *outbuf;
+    int outlen, outsize;
+    unsigned long outbits;
+    int noutbits;
+    int comp_disabled;
 
     uzlib_hash_entry_t *hash_table;
     unsigned int hash_bits;
@@ -155,6 +157,8 @@ struct uzlib_comp {
 
 void TINFCC uzlib_compress(struct uzlib_comp *c, const uint8_t *src, unsigned slen);
 
+#include "defl_static.h"
+
 /* Checksum API */
 
 /* prev_sum is previous value for incremental computation, 1 initially */
-- 
2.41.0


From 6d60d651a4499a64f2e5b21b4cc08d98cb84b5c1 Mon Sep 17 00:00:00 2001
From: Paul Sokolovsky <pfalcon@users.sourceforge.net>
Date: Mon, 15 Nov 2021 00:26:06 +0300
Subject: [PATCH 7/8] tgzip: Update for `struct uzlib_comp` refactor.

Signed-off-by: Paul Sokolovsky <pfalcon@users.sourceforge.net>
---
 examples/tgzip/tgzip.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/examples/tgzip/tgzip.c b/examples/tgzip/tgzip.c
index 505169c..d869d38 100644
--- a/examples/tgzip/tgzip.c
+++ b/examples/tgzip/tgzip.c
@@ -91,11 +91,11 @@ int main(int argc, char *argv[])
     comp.hash_table = malloc(hash_size);
     memset(comp.hash_table, 0, hash_size);
 
-    zlib_start_block(&comp.out);
+    zlib_start_block(&comp);
     uzlib_compress(&comp, source, len);
-    zlib_finish_block(&comp.out);
+    zlib_finish_block(&comp);
 
-    printf("compressed to %u raw bytes\n", comp.out.outlen);
+    printf("compressed to %u raw bytes\n", comp.outlen);
 
     /* -- write output -- */
 
@@ -108,7 +108,7 @@ int main(int argc, char *argv[])
     putc(0x04, fout); // XFL
     putc(0x03, fout); // OS
 
-    fwrite(comp.out.outbuf, 1, comp.out.outlen, fout);
+    fwrite(comp.outbuf, 1, comp.outlen, fout);
 
     unsigned crc = ~uzlib_crc32(source, len, ~0);
     fwrite(&crc, sizeof(crc), 1, fout);
-- 
2.41.0


From fcd9cd0ece52626879b12ab07b268b66cad39477 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=BCrgen=20Willi=20Sievers?= <JSievers@NadiSoft.de>
Date: Thu, 3 Aug 2023 03:18:25 +0200
Subject: [PATCH 8/8] ez80cc fixing

---
 .gitignore     | 5 ++---
 src/genlz77.c  | 2 +-
 src/tinflate.c | 4 ++--
 3 files changed, 5 insertions(+), 6 deletions(-)

diff --git a/.gitignore b/.gitignore
index 29d8a16..ac01e66 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,2 @@
-*.o
-*.map
-*.a
+/Debug/
+/Release/
diff --git a/src/genlz77.c b/src/genlz77.c
index ede1fc9..4bf07ae 100644
--- a/src/genlz77.c
+++ b/src/genlz77.c
@@ -104,9 +104,9 @@ void uzlib_compress(struct uzlib_comp *data, const uint8_t *src, unsigned slen)
         const uint8_t *subs = *bucket;
         *bucket = src;
         if (subs && src > subs && (src - subs) <= MAX_OFFSET && !memcmp(src, subs, MIN_MATCH)) {
-            src += MIN_MATCH;
             const uint8_t *m = subs + MIN_MATCH;
             int len = MIN_MATCH;
+            src += MIN_MATCH;
             while (*src == *m && len < MAX_MATCH && src < top) {
                 src++; m++; len++;
             }
diff --git a/src/tinflate.c b/src/tinflate.c
index d719d80..10398a6 100644
--- a/src/tinflate.c
+++ b/src/tinflate.c
@@ -501,6 +501,7 @@ static int tinf_inflate_block_data(TINF_DATA *d, TINF_TREE *lt, TINF_TREE *dt)
 /* inflate next byte from uncompressed block of data */
 static int tinf_inflate_uncompressed_block(TINF_DATA *d)
 {
+    unsigned char c;
     if (d->curlen == 0) {
         unsigned int length, invlength;
 
@@ -524,8 +525,7 @@ static int tinf_inflate_uncompressed_block(TINF_DATA *d)
     if (--d->curlen == 0) {
         return TINF_DONE;
     }
-
-    unsigned char c = uzlib_get_byte(d);
+    c = uzlib_get_byte(d);
     TINF_PUT(d, c);
     return TINF_OK;
 }
-- 
2.41.0

