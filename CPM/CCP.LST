   1:					include CPM.INC
**** ./CPM22/CPM.INC ****
   1:				
   2:				;	CBIOS for eZ80 Z80-Mixed-Mode
   3:				;
   4:				;	Copyright (C) 1998-2021 by Juergen Sievers
   5:				;
   6:     -	0040          	MEM:		EQU	64	;cp/m version memory size in kilobytes
   7:				;
   8:				;	"bias" is address offset from 3400H for memory systems
   9:				;	than 16K (referred to as "b" throughout the text).
  10:				;
  11:     -	B000          	BIAS:	EQU	(MEM-20)*1024
  12:     -	E400          	CCP:	EQU	3400H+BIAS	;base of ccp
  13:     -	EC06          	BDOS:	EQU	CCP+806H	;base of bdos
  14:     -	FA00          	BIOS:	EQU	CCP+1600H	;base of bios
  15:     -	0004          	CDISK:	EQU	0004H		;current disk number 0=A,...,15=P
  16:				
  17:				;
  18:				;   BIOS entrys
  19:				;
  20:     -	FA00          	BOOT 	equ BIOS+3*0   ;cold start
  21:     -	FA03          	WBOOT 	equ BIOS+3*1   ;warm start
  22:     -	FA06          	CONST 	equ BIOS+3*2   ;console status
  23:     -	FA09          	CONIN 	equ BIOS+3*3   ;console character in
  24:     -	FA0C          	CONOUT  equ BIOS+3*4   ;console character out
  25:     -	FA0F          	PLIST 	equ BIOS+3*5   ;list character out
  26:     -	FA12          	PUNCH 	equ BIOS+3*6   ;punch character out
  27:     -	FA15          	READER  equ BIOS+3*7   ;reader character out
  28:     -	FA18          	HOME 	equ BIOS+3*8   ;move head to home position
  29:     -	FA1B          	SELDSK  equ BIOS+3*9   ;select disk
  30:     -	FA1E          	SETTRK  equ BIOS+3*10  ;set track number
  31:     -	FA21          	SETSEC  equ BIOS+3*11  ;set sector number
  32:     -	FA24          	SETDMA  equ BIOS+3*12  ;set dma address
  33:     -	FA27          	READ 	equ BIOS+3*13  ;read disk
  34:     -	FA2A          	WRITE 	equ BIOS+3*14  ;write disk
  35:     -	FA2D          	LISTST  equ BIOS+3*15  ;return list status
  36:     -	FA30          	SECTRN  equ BIOS+3*16  ;sector translate
  37:				
  38:				;
  39:				;   Set control character equates.
  40:				;
  41:     -	0003          	CNTRLC	EQU	3		;control-c
  42:     -	0005          	CNTRLE	EQU	05H		;control-e
  43:     -	0008          	BS		EQU	08H		;backspace
  44:     -	0009          	TAB		EQU	09H		;tab
  45:     -	000A          	LF		EQU	0AH		;line feed
  46:     -	000C          	FF		EQU	0CH		;form feed
  47:     -	000D          	CR		EQU	0DH		;carriage return
  48:     -	0010          	CNTRLP	EQU	10H		;control-p
  49:     -	0012          	CNTRLR	EQU	12H		;control-r
  50:     -	0013          	CNTRLS	EQU	13H		;control-s
  51:     -	0015          	CNTRLU	EQU	15H		;control-u
  52:     -	0018          	CNTRLX	EQU	18H		;control-x
  53:     -	001A          	CNTRLZ	EQU	1AH		;control-z (end-of-file mark)
  54:     -	007F          	DEL		EQU	7FH		;rubout
  55:				
  56:     -	0003          	IOBYTE	EQU	3		;i/o definition byte.
  57:     -	0004          	TDRIVE	EQU	4		;current drive name and user number.
  58:     -	0005          	ENTRY	EQU	5		;entry point for the cp/m bdos.
  59:     -	005C          	TFCB	EQU	5CH		;default file control block.
  60:     -	0080          	TBUFF	EQU	80H		;i/o buffer and command line storage.
  61:     -	0100          	TBASE	EQU	100H		;transiant program storage area.
  62:				
  63:				
  64:				SERIALNO macro
  65:						db	0,22,0,0,0,0
  66:						endm
**** ./CPM22/CCP.ASM ****
   2:					
   3:				;**************************************************************
   4:				;*
   5:				;*             C P / M   version   2 . 2
   6:				;*
   7:				;*   Reconstructed from memory image on February 27, 1981
   8:				;*
   9:				;*                by Clark A. Calkins
  10:				;*
  11:				;**************************************************************
  12:				;
  13:				;   Set memory limit here. This is the amount of contigeous
  14:				; ram starting from 0000. CP/M will reside at the end of this space.
  15:				;
  16:				;MEM	EQU	62		;for a 62k system (TS802 TEST - WORKS OK).
  17:				;
  18:				;
  19:				;   Set origin for CP/M
  20:				;
  21:     -	E400          		ORG	CCP
  22:					
  23:				;
  24:    0+10	E400  C35CE7  	CBASE:	JP	COMMAND		;execute command processor (ccp).
  25:   10+10	E403  C358E7  		JP	CLEARBUF	;entry to empty input buffer before starting ccp.
  26:				
  27:				;
  28:				;   Standard cp/m ccp input buffer. Format is (max length),
  29:				; (actual length), (char #1), (char #2), (char #3), etc.
  30:				;
  31:     -	E406  7F      	INBUFF:	DEFB	127		;length of input buffer.
  32:     -	E407  00      		DEFB	0		;current length of contents.
  33:     -	E408  436F7079		DEFB	'Copyright'
	              72696768
	              74
  34:     -	E411  20313937		DEFB	' 1979 (c) by Digital Research      '
	              39202863
	              29206279
	              20446967
	              6974616C
	              20526573
	              65617263
	              68202020
	              202020
  35:     -	E434  00000000		DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	              00000000
	              00000000
	              00000000
	              00000000
	              000000
  36:     -	E44B  00000000		DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	              00000000
	              00000000
	              00000000
	              00000000
	              000000
  37:     -	E462  00000000		DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	              00000000
	              00000000
	              00000000
	              00000000
	              000000
  38:     -	E479  00000000		DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	              00000000
	              00000000
	              000000
  39:     -	E488  08E4    	INPOINT:DW	INBUFF+2	;input line pointer
  40:     -	E48A  0000    	NAMEPNT:DW	0		;input line pointer used for error message. Points to
  41:				;			;start of name in error.
  42:				;
  43:				;   Routine to print (A) on the console. All registers used.
  44:				;
  45:   20+4	E48C  5F      	PRINT:	LD	E,A		;setup bdos call.
  46:   24+7	E48D  0E02    		LD	C,2
  47:   31+10	E48F  C30500  		JP	ENTRY
  48:				;
  49:				;   Routine to print (A) on the console and to save (BC).
  50:				;
  51:   41+11	E492  C5      	PRINTB:	PUSH	BC
  52:   52+17	E493  CD8CE4  		CALL	PRINT
  53:   69+10	E496  C1      		POP	BC
  54:   79+10	E497  C9      		RET	
  55:				;
  56:				;   Routine to send a carriage return, line feed combination
  57:				; to the console.
  58:				;
  59:   89+7	E498  3E0D    	CRLF:	LD	A,CR
  60:   96+17	E49A  CD92E4  		CALL	PRINTB
  61:  113+7	E49D  3E0A    		LD	A,LF
  62:  120+10	E49F  C392E4  		JP	PRINTB
  63:				;
  64:				;   Routine to send one space to the console and save (BC).
  65:				;
  66:  130+7	E4A2  3E20    	SPACE:	LD	A,' '
  67:  137+10	E4A4  C392E4  		JP	PRINTB
  68:				;
  69:				;   Routine to print character string pointed to be (BC) on the
  70:				; console. It must terminate with a null byte.
  71:				;
  72:  147+11	E4A7  C5      	PLINE:	PUSH	BC
  73:  158+17	E4A8  CD98E4  		CALL	CRLF
  74:  175+10	E4AB  E1      		POP	HL
  75:  185+7	E4AC  7E      	PLINE2:	LD	A,(HL)
  76:  192+4	E4AD  B7      		OR	A
  77:  196+5+6	E4AE  C8      		RET	Z
  78:  201+6	E4AF  23      		INC	HL
  79:  207+11	E4B0  E5      		PUSH	HL
  80:  218+17	E4B1  CD8CE4  		CALL	PRINT
  81:  235+10	E4B4  E1      		POP	HL
  82:  245+10	E4B5  C3ACE4  		JP	PLINE2
  83:				;
  84:				;   Routine to reset the disk system.
  85:				;
  86:  255+7	E4B8  0E0D    	RESDSK:	LD	C,13
  87:  262+10	E4BA  C30500  		JP	ENTRY
  88:				;
  89:				;   Routine to select disk (A).
  90:				;
  91:  272+4	E4BD  5F      	DSKSEL:	LD	E,A
  92:  276+7	E4BE  0E0E    		LD	C,14
  93:  283+10	E4C0  C30500  		JP	ENTRY
  94:				;
  95:				;   Routine to call bdos and save the return code. The zero
  96:				; flag is set on a return of 0ffh.
  97:				;
  98:  293+17	E4C3  CD0500  	ENTRY1:	CALL	ENTRY
  99:  310+13	E4C6  32EEEB  		LD	(RTNCODE),A	;save return code.
 100:  323+4	E4C9  3C      		INC	A		;set zero if 0ffh returned.
 101:  327+10	E4CA  C9      		RET	
 102:				;
 103:				;   Routine to open a file. (DE) must point to the _FCB.
 104:				;
 105:  337+7	E4CB  0E0F    	OPEN:	LD	C,15
 106:  344+10	E4CD  C3C3E4  		JP	ENTRY1
 107:				;
 108:				;   Routine to open file at (_FCB).
 109:				;
 110:  354+4	E4D0  AF      	OPENFCB:XOR	A		;clear the record number byte at fcb+32
 111:  358+13	E4D1  32EDEB  		LD	(_FCB+32),A
 112:  371+10	E4D4  11CDEB  		LD	DE,_FCB
 113:  381+10	E4D7  C3CBE4  		JP	OPEN
 114:				;
 115:				;   Routine to close a file. (DE) points to _FCB.
 116:				;
 117:  391+7	E4DA  0E10    	CLOSE:	LD	C,16
 118:  398+10	E4DC  C3C3E4  		JP	ENTRY1
 119:				;
 120:				;   Routine to search for the first file with ambigueous name
 121:				; (DE).
 122:				;
 123:  408+7	E4DF  0E11    	SRCHFST:LD	C,17
 124:  415+10	E4E1  C3C3E4  		JP	ENTRY1
 125:				;
 126:				;   Search for the next ambigeous file name.
 127:				;
 128:  425+7	E4E4  0E12    	SRCHNXT:LD	C,18
 129:  432+10	E4E6  C3C3E4  		JP	ENTRY1
 130:				;
 131:				;   Search for file at (_FCB).
 132:				;
 133:  442+10	E4E9  11CDEB  	SRCHFCB:LD	DE,_FCB
 134:  452+10	E4EC  C3DFE4  		JP	SRCHFST
 135:				;
 136:				;   Routine to delete a file pointed to by (DE).
 137:				;
 138:  462+7	E4EF  0E13    	DELETE:	LD	C,19
 139:  469+10	E4F1  C30500  		JP	ENTRY
 140:				;
 141:				;   Routine to call the bdos and set the zero flag if a zero
 142:				; status is returned.
 143:				;
 144:  479+17	E4F4  CD0500  	ENTRY2:	CALL	ENTRY
 145:  496+4	E4F7  B7      		OR	A		;set zero flag if appropriate.
 146:  500+10	E4F8  C9      		RET	
 147:				;
 148:				;   Routine to read the next record from a sequential file.
 149:				; (DE) points to the _FCB.
 150:				;
 151:  510+7	E4F9  0E14    	RDREC:	LD	C,20
 152:  517+10	E4FB  C3F4E4  		JP	ENTRY2
 153:				;
 154:				;   Routine to read file at (_FCB).
 155:				;
 156:  527+10	E4FE  11CDEB  	READFCB:LD	DE,_FCB
 157:  537+10	E501  C3F9E4  		JP	RDREC
 158:				;
 159:				;   Routine to write the next record of a sequential file.
 160:				; (DE) points to the _FCB.
 161:				;
 162:  547+7	E504  0E15    	WRTREC:	LD	C,21
 163:  554+10	E506  C3F4E4  		JP	ENTRY2
 164:				;
 165:				;   Routine to create the file pointed to by (DE).
 166:				;
 167:  564+7	E509  0E16    	CREATE:	LD	C,22
 168:  571+10	E50B  C3C3E4  		JP	ENTRY1
 169:				;
 170:				;   Routine to rename the file pointed to by (DE). Note that
 171:				; the new name starts at (DE+16).
 172:				;
 173:  581+7	E50E  0E17    	RENAM:	LD	C,23
 174:  588+10	E510  C30500  		JP	ENTRY
 175:				;
 176:				;   Get the current user code.
 177:				;
 178:  598+7	E513  1EFF    	GETUSR:	LD	E,0FFH
 179:				;
 180:				;   Routne to get or set the current user code.
 181:				; If (E) is FF then this is a GET, else it is a SET.
 182:				;
 183:  605+7	E515  0E20    	GETSETUC: LD	C,32
 184:  612+10	E517  C30500  		JP	ENTRY
 185:				;
 186:				;   Routine to set the current drive byte at (TDRIVE).
 187:				;
 188:  622+17	E51A  CD13E5  	SETCDRV:CALL	GETUSR		;get user number
 189:  639+4	E51D  87      		ADD	A,A		;and shift into the upper 4 bits.
 190:  643+4	E51E  87      		ADD	A,A
 191:  647+4	E51F  87      		ADD	A,A
 192:  651+4	E520  87      		ADD	A,A
 193:  655+10	E521  21EFEB  		LD	HL,CDRIVE	;now add in the current drive number.
 194:  665+7	E524  B6      		OR	(HL)
 195:  672+13	E525  320400  		LD	(TDRIVE),A	;and save.
 196:  685+10	E528  C9      		RET	
 197:				;
 198:				;   Move currently active drive down to (TDRIVE).
 199:				;
 200:  695+13	E529  3AEFEB  	MOVECD:	LD	A,(CDRIVE)
 201:  708+13	E52C  320400  		LD	(TDRIVE),A
 202:  721+10	E52F  C9      		RET	
 203:				;
 204:				;   Routine to convert (A) into upper case ascii. Only letters
 205:				; are affected.
 206:				;
 207:  731+7	E530  FE61    	UPPER:	CP	'a'		;check for letters in the range of 'a' to 'z'.
 208:  738+5+6	E532  D8      		RET	C
 209:  743+7	E533  FE7B    		CP	'{'
 210:  750+5+6	E535  D0      		RET	NC
 211:  755+7	E536  E65F    		AND	5FH		;convert it if found.
 212:  762+10	E538  C9      		RET	
 213:				;
 214:				;   Routine to get a line of input. We must check to see if the
 215:				; user is in (BATCH) mode. If so, then read the input from file
 216:				; ($$$.SUB). At the end, reset to console input.
 217:				;
 218:  772+13	E539  3AABEB  	GETINP:	LD	A,(BATCH)	;if =0, then use console input.
 219:  785+4	E53C  B7      		OR	A
 220:  789+10	E53D  CA96E5  		JP	Z,GETINP1
 221:				;
 222:				;   Use the submit file ($$$.sub) which is prepared by a
 223:				; SUBMIT run. It must be on drive (A) and it will be deleted
 224:				; if and error occures (like eof).
 225:				;
 226:  799+13	E540  3AEFEB  		LD	A,(CDRIVE)	;select drive 0 if need be.
 227:  812+4	E543  B7      		OR	A
 228:  816+7	E544  3E00    		LD	A,0		;always use drive A for submit.
 229:  823+10+7	E546  C4BDE4  		CALL	NZ,DSKSEL	;select it if required.
 230:  833+10	E549  11ACEB  		LD	DE,BATCHFCB
 231:  843+17	E54C  CDCBE4  		CALL	OPEN		;look for it.
 232:  860+10	E54F  CA96E5  		JP	Z,GETINP1	;if not there, use normal input.
 233:  870+13	E552  3ABBEB  		LD	A,(BATCHFCB+15)	;get last record number+1.
 234:  883+4	E555  3D      		DEC	A
 235:  887+13	E556  32CCEB  		LD	(BATCHFCB+32),A
 236:  900+10	E559  11ACEB  		LD	DE,BATCHFCB
 237:  910+17	E55C  CDF9E4  		CALL	RDREC		;read last record.
 238:  927+10	E55F  C296E5  		JP	NZ,GETINP1	;quit on end of file.
 239:				;
 240:				;   Move this record into input buffer.
 241:				;
 242:  937+10	E562  1107E4  		LD	DE,INBUFF+1
 243:  947+10	E565  218000  		LD	HL,TBUFF	;data was read into buffer here.
 244:  957+7	E568  0680    		LD	B,128		;all 128 characters may be used.
 245:  964+17	E56A  CD42E8  		CALL	HL2DE		;(HL) to (DE), (B) bytes.
 246:  981+10	E56D  21BAEB  		LD	HL,BATCHFCB+14
 247:  991+10	E570  3600    		LD	(HL),0		;zero out the 's2' byte.
 248: 1001+6	E572  23      		INC	HL		;and decrement the record count.
 249: 1007+11	E573  35      		DEC	(HL)
 250: 1018+10	E574  11ACEB  		LD	DE,BATCHFCB	;close the batch file now.
 251: 1028+17	E577  CDDAE4  		CALL	CLOSE
 252: 1045+10	E57A  CA96E5  		JP	Z,GETINP1	;quit on an error.
 253: 1055+13	E57D  3AEFEB  		LD	A,(CDRIVE)	;re-select previous drive if need be.
 254: 1068+4	E580  B7      		OR	A
 255: 1072+10+7	E581  C4BDE4  		CALL	NZ,DSKSEL	;don't do needless selects.
 256:				;
 257:				;   Print line just read on console.
 258:				;
 259: 1082+10	E584  2108E4  		LD	HL,INBUFF+2
 260: 1092+17	E587  CDACE4  		CALL	PLINE2
 261: 1109+17	E58A  CDC2E5  		CALL	CHKCON		;check console, quit on a key.
 262: 1126+10	E58D  CAA7E5  		JP	Z,GETINP2	;jump if no key is pressed.
 263:				;
 264:				;   Terminate the submit job on any keyboard input. Delete this
 265:				; file such that it is not re-started and jump to normal keyboard
 266:				; input section.
 267:				;
 268: 1136+17	E590  CDDDE5  		CALL	DELBATCH	;delete the batch file.
 269: 1153+10	E593  C382E7  		JP	CMMND1		;and restart command input.
 270:				;
 271:				;   Get here for normal keyboard input. Delete the submit file
 272:				; incase there was one.
 273:				;
 274: 1163+17	E596  CDDDE5  	GETINP1:CALL	DELBATCH	;delete file ($$$.sub).
 275: 1180+17	E599  CD1AE5  		CALL	SETCDRV		;reset active disk.
 276: 1197+7	E59C  0E0A    		LD	C,10		;get line from console device.
 277: 1204+10	E59E  1106E4  		LD	DE,INBUFF
 278: 1214+17	E5A1  CD0500  		CALL	ENTRY
 279: 1231+17	E5A4  CD29E5  		CALL	MOVECD		;reset current drive (again).
 280:				;
 281:				;   Convert input line to upper case.
 282:				;
 283: 1248+10	E5A7  2107E4  	GETINP2:LD	HL,INBUFF+1
 284: 1258+7	E5AA  46      		LD	B,(HL)		;(B)=character counter.
 285: 1265+6	E5AB  23      	GETINP3:INC	HL
 286: 1271+4	E5AC  78      		LD	A,B		;end of the line?
 287: 1275+4	E5AD  B7      		OR	A
 288: 1279+10	E5AE  CABAE5  		JP	Z,GETINP4
 289: 1289+7	E5B1  7E      		LD	A,(HL)		;convert to upper case.
 290: 1296+17	E5B2  CD30E5  		CALL	UPPER
 291: 1313+7	E5B5  77      		LD	(HL),A
 292: 1320+4	E5B6  05      		DEC	B		;adjust character count.
 293: 1324+10	E5B7  C3ABE5  		JP	GETINP3
 294: 1334+7	E5BA  77      	GETINP4:LD	(HL),A		;add trailing null.
 295: 1341+10	E5BB  2108E4  		LD	HL,INBUFF+2
 296: 1351+16	E5BE  2288E4  		LD	(INPOINT),HL	;reset input line pointer.
 297: 1367+10	E5C1  C9      		RET	
 298:				;
 299:				;   Routine to check the console for a key pressed. The zero
 300:				; flag is set is none, else the character is returned in (A).
 301:				;
 302: 1377+7	E5C2  0E0B    	CHKCON:	LD	C,11		;check console.
 303: 1384+17	E5C4  CD0500  		CALL	ENTRY
 304: 1401+4	E5C7  B7      		OR	A
 305: 1405+5+6	E5C8  C8      		RET	Z		;return if nothing.
 306: 1410+7	E5C9  0E01    		LD	C,1		;else get character.
 307: 1417+17	E5CB  CD0500  		CALL	ENTRY
 308: 1434+4	E5CE  B7      		OR	A		;clear zero flag and return.
 309: 1438+10	E5CF  C9      		RET	
 310:				;
 311:				;   Routine to get the currently active drive number.
 312:				;
 313: 1448+7	E5D0  0E19    	GETDSK:	LD	C,25
 314: 1455+10	E5D2  C30500  		JP	ENTRY
 315:				;
 316:				;   Set the stabdard dma address.
 317:				;
 318: 1465+10	E5D5  118000  	STDDMA:	LD	DE,TBUFF
 319:				;
 320:				;   Routine to set the dma address to (DE).
 321:				;
 322: 1475+7	E5D8  0E1A    	DMASET:	LD	C,26
 323: 1482+10	E5DA  C30500  		JP	ENTRY
 324:				;
 325:				;  Delete the batch file created by SUBMIT.
 326:				;
 327: 1492+10	E5DD  21ABEB  	DELBATCH: LD	HL,BATCH	;is batch active?
 328: 1502+7	E5E0  7E      		LD	A,(HL)
 329: 1509+4	E5E1  B7      		OR	A
 330: 1513+5+6	E5E2  C8      		RET	Z
 331: 1518+10	E5E3  3600    		LD	(HL),0		;yes, de-activate it.
 332: 1528+4	E5E5  AF      		XOR	A
 333: 1532+17	E5E6  CDBDE4  		CALL	DSKSEL		;select drive 0 for sure.
 334: 1549+10	E5E9  11ACEB  		LD	DE,BATCHFCB	;and delete this file.
 335: 1559+17	E5EC  CDEFE4  		CALL	DELETE
 336: 1576+13	E5EF  3AEFEB  		LD	A,(CDRIVE)	;reset current drive.
 337: 1589+10	E5F2  C3BDE4  		JP	DSKSEL
 338:				;
 339:				;   Check to two strings at (PATTRN1) and (PATTRN2). They must be
 340:				; the same or we halt....
 341:				;
 342: 1599+10	E5F5  1128E7  	VERIFY:	LD	DE,PATTRN1	;these are the serial number bytes.
 343: 1609+10	E5F8  2100EC  		LD	HL,PATTRN2	;ditto, but how could they be different?
 344: 1619+7	E5FB  0606    		LD	B,6		;6 bytes each.
 345: 1626+7	E5FD  1A      	VERIFY1:LD	A,(DE)
 346: 1633+7	E5FE  BE      		CP	(HL)
 347: 1640+10	E5FF  C2CFE7  		JP	NZ,HALT		;jump to halt routine.
 348: 1650+6	E602  13      		INC	DE
 349: 1656+6	E603  23      		INC	HL
 350: 1662+4	E604  05      		DEC	B
 351: 1666+10	E605  C2FDE5  		JP	NZ,VERIFY1
 352: 1676+10	E608  C9      		RET	
 353:				;
 354:				;   Print back file name with a '?' to indicate a syntax error.
 355:				;
 356: 1686+17	E609  CD98E4  	SYNERR:	CALL	CRLF		;end current line.
 357: 1703+16	E60C  2A8AE4  		LD	HL,(NAMEPNT)	;this points to name in error.
 358: 1719+7	E60F  7E      	SYNERR1:LD	A,(HL)		;print it until a space or null is found.
 359: 1726+7	E610  FE20    		CP	' '
 360: 1733+10	E612  CA22E6  		JP	Z,SYNERR2
 361: 1743+4	E615  B7      		OR	A
 362: 1747+10	E616  CA22E6  		JP	Z,SYNERR2
 363: 1757+11	E619  E5      		PUSH	HL
 364: 1768+17	E61A  CD8CE4  		CALL	PRINT
 365: 1785+10	E61D  E1      		POP	HL
 366: 1795+6	E61E  23      		INC	HL
 367: 1801+10	E61F  C30FE6  		JP	SYNERR1
 368: 1811+7	E622  3E3F    	SYNERR2:LD	A,'?'		;add trailing '?'.
 369: 1818+17	E624  CD8CE4  		CALL	PRINT
 370: 1835+17	E627  CD98E4  		CALL	CRLF
 371: 1852+17	E62A  CDDDE5  		CALL	DELBATCH	;delete any batch file.
 372: 1869+10	E62D  C382E7  		JP	CMMND1		;and restart from console input.
 373:				;
 374:				;   Check character at (DE) for legal command input. Note that the
 375:				; zero flag is set if the character is a delimiter.
 376:				;
 377: 1879+7	E630  1A      	CHECK:	LD	A,(DE)
 378: 1886+4	E631  B7      		OR	A
 379: 1890+5+6	E632  C8      		RET	Z
 380: 1895+7	E633  FE20    		CP	' '		;control characters are not legal here.
 381: 1902+10	E635  DA09E6  		JP	C,SYNERR
 382: 1912+5+6	E638  C8      		RET	Z		;check for valid delimiter.
 383: 1917+7	E639  FE3D    		CP	'='
 384: 1924+5+6	E63B  C8      		RET	Z
 385: 1929+7	E63C  FE5F    		CP	'_'
 386: 1936+5+6	E63E  C8      		RET	Z
 387: 1941+7	E63F  FE2E    		CP	'.'
 388: 1948+5+6	E641  C8      		RET	Z
 389: 1953+7	E642  FE3A    		CP	':'
 390: 1960+5+6	E644  C8      		RET	Z
 391: 1965+7	E645  FE3B    		CP	';'
 392: 1972+5+6	E647  C8      		RET	Z
 393: 1977+7	E648  FE3C    		CP	'<'
 394: 1984+5+6	E64A  C8      		RET	Z
 395: 1989+7	E64B  FE3E    		CP	'>'
 396: 1996+5+6	E64D  C8      		RET	Z
 397: 2001+10	E64E  C9      		RET	
 398:				;
 399:				;   Get the next non-blank character from (DE).
 400:				;
 401: 2011+7	E64F  1A      	NONBLANK: LD	A,(DE)
 402: 2018+4	E650  B7      		OR	A		;string ends with a null.
 403: 2022+5+6	E651  C8      		RET	Z
 404: 2027+7	E652  FE20    		CP	' '
 405: 2034+5+6	E654  C0      		RET	NZ
 406: 2039+6	E655  13      		INC	DE
 407: 2045+10	E656  C34FE6  		JP	NONBLANK
 408:				;
 409:				;   Add (HL)=(HL)+(A)
 410:				;
 411: 2055+4	E659  85      	ADDHL:	ADD	A,L
 412: 2059+4	E65A  6F      		LD	L,A
 413: 2063+5+6	E65B  D0      		RET	NC		;take care of any carry.
 414: 2068+4	E65C  24      		INC	H
 415: 2072+10	E65D  C9      		RET	
 416:				;
 417:				;   Convert the first name in (_FCB).
 418:				;
 419: 2082+7	E65E  3E00    	CONVFST:LD	A,0
 420:				;
 421:				;   Format a file name (convert * to '?', etc.). On return,
 422:				; (A)=0 is an unambigeous name was specified. Enter with (A) equal to
 423:				; the position within the fcb for the name (either 0 or 16).
 424:				;
 425: 2089+10	E660  21CDEB  	CONVERT:LD	HL,_FCB
 426: 2099+17	E663  CD59E6  		CALL	ADDHL
 427: 2116+11	E666  E5      		PUSH	HL
 428: 2127+11	E667  E5      		PUSH	HL
 429: 2138+4	E668  AF      		XOR	A
 430: 2142+13	E669  32F0EB  		LD	(CHGDRV),A	;initialize drive change flag.
 431: 2155+16	E66C  2A88E4  		LD	HL,(INPOINT)	;set (HL) as pointer into input line.
 432: 2171+4	E66F  EB      		EX	DE,HL
 433: 2175+17	E670  CD4FE6  		CALL	NONBLANK	;get next non-blank character.
 434: 2192+4	E673  EB      		EX	DE,HL
 435: 2196+16	E674  228AE4  		LD	(NAMEPNT),HL	;save pointer here for any error message.
 436: 2212+4	E677  EB      		EX	DE,HL
 437: 2216+10	E678  E1      		POP	HL
 438: 2226+7	E679  1A      		LD	A,(DE)		;get first character.
 439: 2233+4	E67A  B7      		OR	A
 440: 2237+10	E67B  CA89E6  		JP	Z,CONVRT1
 441: 2247+7	E67E  DE40    		SBC	A,'A'-1		;might be a drive name, convert to binary.
 442: 2254+4	E680  47      		LD	B,A		;and save.
 443: 2258+6	E681  13      		INC	DE		;check next character for a ':'.
 444: 2264+7	E682  1A      		LD	A,(DE)
 445: 2271+7	E683  FE3A    		CP	':'
 446: 2278+10	E685  CA90E6  		JP	Z,CONVRT2
 447: 2288+6	E688  1B      		DEC	DE		;nope, move pointer back to the start of the line.
 448: 2294+13	E689  3AEFEB  	CONVRT1:LD	A,(CDRIVE)
 449: 2307+7	E68C  77      		LD	(HL),A
 450: 2314+10	E68D  C396E6  		JP	CONVRT3
 451: 2324+4	E690  78      	CONVRT2:LD	A,B
 452: 2328+13	E691  32F0EB  		LD	(CHGDRV),A	;set change in drives flag.
 453: 2341+7	E694  70      		LD	(HL),B
 454: 2348+6	E695  13      		INC	DE
 455:				;
 456:				;   Convert the basic file name.
 457:				;
 458: 2354+7	E696  0608    	CONVRT3:LD	B,08H
 459: 2361+17	E698  CD30E6  	CONVRT4:CALL	CHECK
 460: 2378+10	E69B  CAB9E6  		JP	Z,CONVRT8
 461: 2388+6	E69E  23      		INC	HL
 462: 2394+7	E69F  FE2A    		CP	'*'		;note that an '*' will fill the remaining
 463: 2401+10	E6A1  C2A9E6  		JP	NZ,CONVRT5	;field with '?'.
 464: 2411+10	E6A4  363F    		LD	(HL),'?'
 465: 2421+10	E6A6  C3ABE6  		JP	CONVRT6
 466: 2431+7	E6A9  77      	CONVRT5:LD	(HL),A
 467: 2438+6	E6AA  13      		INC	DE
 468: 2444+4	E6AB  05      	CONVRT6:DEC	B
 469: 2448+10	E6AC  C298E6  		JP	NZ,CONVRT4
 470: 2458+17	E6AF  CD30E6  	CONVRT7:CALL	CHECK		;get next delimiter.
 471: 2475+10	E6B2  CAC0E6  		JP	Z,GETEXT
 472: 2485+6	E6B5  13      		INC	DE
 473: 2491+10	E6B6  C3AFE6  		JP	CONVRT7
 474: 2501+6	E6B9  23      	CONVRT8:INC	HL		;blank fill the file name.
 475: 2507+10	E6BA  3620    		LD	(HL),' '
 476: 2517+4	E6BC  05      		DEC	B
 477: 2521+10	E6BD  C2B9E6  		JP	NZ,CONVRT8
 478:				;
 479:				;   Get the extension and convert it.
 480:				;
 481: 2531+7	E6C0  0603    	GETEXT:	LD	B,03H
 482: 2538+7	E6C2  FE2E    		CP	'.'
 483: 2545+10	E6C4  C2E9E6  		JP	NZ,GETEXT5
 484: 2555+6	E6C7  13      		INC	DE
 485: 2561+17	E6C8  CD30E6  	GETEXT1:CALL	CHECK
 486: 2578+10	E6CB  CAE9E6  		JP	Z,GETEXT5
 487: 2588+6	E6CE  23      		INC	HL
 488: 2594+7	E6CF  FE2A    		CP	'*'
 489: 2601+10	E6D1  C2D9E6  		JP	NZ,GETEXT2
 490: 2611+10	E6D4  363F    		LD	(HL),'?'
 491: 2621+10	E6D6  C3DBE6  		JP	GETEXT3
 492: 2631+7	E6D9  77      	GETEXT2:LD	(HL),A
 493: 2638+6	E6DA  13      		INC	DE
 494: 2644+4	E6DB  05      	GETEXT3:DEC	B
 495: 2648+10	E6DC  C2C8E6  		JP	NZ,GETEXT1
 496: 2658+17	E6DF  CD30E6  	GETEXT4:CALL	CHECK
 497: 2675+10	E6E2  CAF0E6  		JP	Z,GETEXT6
 498: 2685+6	E6E5  13      		INC	DE
 499: 2691+10	E6E6  C3DFE6  		JP	GETEXT4
 500: 2701+6	E6E9  23      	GETEXT5:INC	HL
 501: 2707+10	E6EA  3620    		LD	(HL),' '
 502: 2717+4	E6EC  05      		DEC	B
 503: 2721+10	E6ED  C2E9E6  		JP	NZ,GETEXT5
 504: 2731+7	E6F0  0603    	GETEXT6:LD	B,3
 505: 2738+6	E6F2  23      	GETEXT7:INC	HL
 506: 2744+10	E6F3  3600    		LD	(HL),0
 507: 2754+4	E6F5  05      		DEC	B
 508: 2758+10	E6F6  C2F2E6  		JP	NZ,GETEXT7
 509: 2768+4	E6F9  EB      		EX	DE,HL
 510: 2772+16	E6FA  2288E4  		LD	(INPOINT),HL	;save input line pointer.
 511: 2788+10	E6FD  E1      		POP	HL
 512:				;
 513:				;   Check to see if this is an ambigeous file name specification.
 514:				; Set the (A) register to non zero if it is.
 515:				;
 516: 2798+10	E6FE  010B00  		LD	BC,11		;set name length.
 517: 2808+6	E701  23      	GETEXT8:INC	HL
 518: 2814+7	E702  7E      		LD	A,(HL)
 519: 2821+7	E703  FE3F    		CP	'?'		;any question marks?
 520: 2828+10	E705  C209E7  		JP	NZ,GETEXT9
 521: 2838+4	E708  04      		INC	B		;count them.
 522: 2842+4	E709  0D      	GETEXT9:DEC	C
 523: 2846+10	E70A  C201E7  		JP	NZ,GETEXT8
 524: 2856+4	E70D  78      		LD	A,B
 525: 2860+4	E70E  B7      		OR	A
 526: 2864+10	E70F  C9      		RET	
 527:				;
 528:				;   CP/M command table. Note commands can be either 3 or 4 characters long.
 529:				;
 530:     -	0006          	NUMCMDS EQU	6		;number of commands
 531:     -	E710  44495220	CMDTBL:	DEFB	'DIR '
 532:     -	E714  45524120		DEFB	'ERA '
 533:     -	E718  54595045		DEFB	'TYPE'
 534:     -	E71C  53415645		DEFB	'SAVE'
 535:     -	E720  52454E20		DEFB	'REN '
 536:     -	E724  55534552		DEFB	'USER'
 537:				;
 538:				;   The following six bytes must agree with those at (PATTRN2)
 539:				; or cp/m will HALT. Why?
 540:				;
 541:     -	E728          	PATTRN1:SERIALNO	;(* serial number bytes *).
 541:     -	E728  00160000			db	0,22,0,0,0,0
	              0000
 541:     -	E72E          			endm
 542:				;
 543:				;   Search the command table for a match with what has just
 544:				; been entered. If a match is found, then we jump to the
 545:				; proper section. Else jump to (UNKNOWN).
 546:				; On return, the (C) register is set to the command number
 547:				; that matched (or NUMCMDS+1 if no match).
 548:				;
 549: 2874+10	E72E  2110E7  	SEARCH:	LD	HL,CMDTBL
 550: 2884+7	E731  0E00    		LD	C,0
 551: 2891+4	E733  79      	SEARCH1:LD	A,C
 552: 2895+7	E734  FE06    		CP	NUMCMDS		;this commands exists.
 553: 2902+5+6	E736  D0      		RET	NC
 554: 2907+10	E737  11CEEB  		LD	DE,_FCB+1	;check this one.
 555: 2917+7	E73A  0604    		LD	B,4		;max command length.
 556: 2924+7	E73C  1A      	SEARCH2:LD	A,(DE)
 557: 2931+7	E73D  BE      		CP	(HL)
 558: 2938+10	E73E  C24FE7  		JP	NZ,SEARCH3	;not a match.
 559: 2948+6	E741  13      		INC	DE
 560: 2954+6	E742  23      		INC	HL
 561: 2960+4	E743  05      		DEC	B
 562: 2964+10	E744  C23CE7  		JP	NZ,SEARCH2
 563: 2974+7	E747  1A      		LD	A,(DE)		;allow a 3 character command to match.
 564: 2981+7	E748  FE20    		CP	' '
 565: 2988+10	E74A  C254E7  		JP	NZ,SEARCH4
 566: 2998+4	E74D  79      		LD	A,C		;set return register for this command.
 567: 3002+10	E74E  C9      		RET	
 568: 3012+6	E74F  23      	SEARCH3:INC	HL
 569: 3018+4	E750  05      		DEC	B
 570: 3022+10	E751  C24FE7  		JP	NZ,SEARCH3
 571: 3032+4	E754  0C      	SEARCH4:INC	C
 572: 3036+10	E755  C333E7  		JP	SEARCH1
 573:				;
 574:				;   Set the input buffer to empty and then start the command
 575:				; processor (ccp).
 576:				;
 577: 3046+4	E758  AF      	CLEARBUF: XOR	A
 578: 3050+13	E759  3207E4  		LD	(INBUFF+1),A	;second byte is actual length.
 579:				;
 580:				;**************************************************************
 581:				;*
 582:				;*
 583:				;* C C P  -   C o n s o l e   C o m m a n d   P r o c e s s o r
 584:				;*
 585:				;**************************************************************
 586:				;*
 587: 3063+10	E75C  31ABEB  	COMMAND:LD	SP,CCPSTACK	;setup stack area.
 588: 3073+11	E75F  C5      		PUSH	BC		;note that (C) should be equal to:
 589: 3084+4	E760  79      		LD	A,C		;(uuuudddd) where 'uuuu' is the user number
 590: 3088+4	E761  1F      		RRA			;and 'dddd' is the drive number.
 591: 3092+4	E762  1F      		RRA	
 592: 3096+4	E763  1F      		RRA	
 593: 3100+4	E764  1F      		RRA	
 594: 3104+7	E765  E60F    		AND	0FH		;isolate the user number.
 595: 3111+4	E767  5F      		LD	E,A
 596: 3115+17	E768  CD15E5  		CALL	GETSETUC	;and set it.
 597: 3132+17	E76B  CDB8E4  		CALL	RESDSK		;reset the disk system.
 598: 3149+13	E76E  32ABEB  		LD	(BATCH),A	;clear batch mode flag.
 599: 3162+10	E771  C1      		POP	BC
 600: 3172+4	E772  79      		LD	A,C
 601: 3176+7	E773  E60F    		AND	0FH		;isolate the drive number.
 602: 3183+13	E775  32EFEB  		LD	(CDRIVE),A	;and save.
 603: 3196+17	E778  CDBDE4  		CALL	DSKSEL		;...and select.
 604: 3213+13	E77B  3A07E4  		LD	A,(INBUFF+1)
 605: 3226+4	E77E  B7      		OR	A		;anything in input buffer already?
 606: 3230+10	E77F  C298E7  		JP	NZ,CMMND2	;yes, we just process it.
 607:				;
 608:				;   Entry point to get a command line from the console.
 609:				;
 610: 3240+10	E782  31ABEB  	CMMND1:	LD	SP,CCPSTACK	;set stack straight.
 611: 3250+17	E785  CD98E4  		CALL	CRLF		;start a new line on the screen.
 612: 3267+17	E788  CDD0E5  		CALL	GETDSK		;get current drive.
 613: 3284+7	E78B  C661    		ADD	A,'a'
 614: 3291+17	E78D  CD8CE4  		CALL	PRINT		;print current drive.
 615: 3308+7	E790  3E3E    		LD	A,'>'
 616: 3315+17	E792  CD8CE4  		CALL	PRINT		;and add prompt.
 617: 3332+17	E795  CD39E5  		CALL	GETINP		;get line from user.
 618:				;
 619:				;   Process command line here.
 620:				;
 621: 3349+10	E798  118000  	CMMND2:	LD	DE,TBUFF
 622: 3359+17	E79B  CDD8E5  		CALL	DMASET		;set standard dma address.
 623: 3376+17	E79E  CDD0E5  		CALL	GETDSK
 624: 3393+13	E7A1  32EFEB  		LD	(CDRIVE),A	;set current drive.
 625: 3406+17	E7A4  CD5EE6  		CALL	CONVFST		;convert name typed in.
 626: 3423+10+7	E7A7  C409E6  		CALL	NZ,SYNERR	;wild cards are not allowed.
 627: 3433+13	E7AA  3AF0EB  		LD	A,(CHGDRV)	;if a change in drives was indicated,
 628: 3446+4	E7AD  B7      		OR	A		;then treat this as an unknown command
 629: 3450+10	E7AE  C2A5EA  		JP	NZ,UNKNOWN	;which gets executed.
 630: 3460+17	E7B1  CD2EE7  		CALL	SEARCH		;else search command table for a match.
 631:				;
 632:				;   Note that an unknown command returns
 633:				; with (A) pointing to the last address
 634:				; in our table which is (UNKNOWN).
 635:				;
 636: 3477+10	E7B4  21C1E7  		LD	HL,CMDADR	;now, look thru our address table for command (A).
 637: 3487+4	E7B7  5F      		LD	E,A		;set (DE) to command number.
 638: 3491+7	E7B8  1600    		LD	D,0
 639: 3498+11	E7BA  19      		ADD	HL,DE
 640: 3509+11	E7BB  19      		ADD	HL,DE		;(HL)=(CMDADR)+2*(command number).
 641: 3520+7	E7BC  7E      		LD	A,(HL)		;now pick out this address.
 642: 3527+6	E7BD  23      		INC	HL
 643: 3533+7	E7BE  66      		LD	H,(HL)
 644: 3540+4	E7BF  6F      		LD	L,A
 645: 3544+4	E7C0  E9      		JP	(HL)		;now execute it.
 646:				;
 647:				;   CP/M command address table.
 648:				;
 649:     -	E7C1  77E81FE9	CMDADR:	DW	DIRECT,ERASE,TYPE,SAVE
	              5DE9ADE9
 650:     -	E7C9  10EA8EEA		DW	RENAME,USER,UNKNOWN
	              A5EA
 651:				;
 652:				;   Halt the system. Reason for this is unknown at present.
 653:				;
 654: 3548+10	E7CF  21F376  	HALT:	LD	HL,76F3H	;'DI HLT' instructions.
 655: 3558+16	E7D2  2200E4  		LD	(CBASE),HL
 656: 3574+10	E7D5  2100E4  		LD	HL,CBASE
 657: 3584+4	E7D8  E9      		JP	(HL)
 658:				;
 659:				;   Read error while TYPEing a file.
 660:				;
 661: 3588+10	E7D9  01DFE7  	RDERROR:LD	BC,RDERR
 662: 3598+10	E7DC  C3A7E4  		JP	PLINE
 663:     -	E7DF  52656164	RDERR:	DEFB	'Read error',0
	              20657272
	              6F7200
 664:				;
 665:				;   Required file was not located.
 666:				;
 667: 3608+10	E7EA  01F0E7  	NONE:	LD	BC,NOFILE
 668: 3618+10	E7ED  C3A7E4  		JP	PLINE
 669:     -	E7F0  4E6F2066	NOFILE:	DEFB	'No file',0
	              696C6500
 670:				;
 671:				;   Decode a command of the form 'A>filename number{ filename}.
 672:				; Note that a drive specifier is not allowed on the first file
 673:				; name. On return, the number is in register (A). Any error
 674:				; causes 'filename?' to be printed and the command is aborted.
 675:				;
 676: 3628+17	E7F8  CD5EE6  	DECODE:	CALL	CONVFST		;convert filename.
 677: 3645+13	E7FB  3AF0EB  		LD	A,(CHGDRV)	;do not allow a drive to be specified.
 678: 3658+4	E7FE  B7      		OR	A
 679: 3662+10	E7FF  C209E6  		JP	NZ,SYNERR
 680: 3672+10	E802  21CEEB  		LD	HL,_FCB+1	;convert number now.
 681: 3682+10	E805  010B00  		LD	BC,11		;(B)=sum register, (C)=max digit count.
 682: 3692+7	E808  7E      	DECODE1:LD	A,(HL)
 683: 3699+7	E809  FE20    		CP	' '		;a space terminates the numeral.
 684: 3706+10	E80B  CA33E8  		JP	Z,DECODE3
 685: 3716+6	E80E  23      		INC	HL
 686: 3722+7	E80F  D630    		SUB	'0'		;make binary from ascii.
 687: 3729+7	E811  FE0A    		CP	10		;legal digit?
 688: 3736+10	E813  D209E6  		JP	NC,SYNERR
 689: 3746+4	E816  57      		LD	D,A		;yes, save it in (D).
 690: 3750+4	E817  78      		LD	A,B		;compute (B)=(B)*10 and check for overflow.
 691: 3754+7	E818  E6E0    		AND	0E0H
 692: 3761+10	E81A  C209E6  		JP	NZ,SYNERR
 693: 3771+4	E81D  78      		LD	A,B
 694: 3775+4	E81E  07      		RLCA	
 695: 3779+4	E81F  07      		RLCA	
 696: 3783+4	E820  07      		RLCA			;(A)=(B)*8
 697: 3787+4	E821  80      		ADD	A,B		;.......*9
 698: 3791+10	E822  DA09E6  		JP	C,SYNERR
 699: 3801+4	E825  80      		ADD	A,B		;.......*10
 700: 3805+10	E826  DA09E6  		JP	C,SYNERR
 701: 3815+4	E829  82      		ADD	A,D		;add in new digit now.
 702: 3819+10	E82A  DA09E6  	DECODE2:JP	C,SYNERR
 703: 3829+4	E82D  47      		LD	B,A		;and save result.
 704: 3833+4	E82E  0D      		DEC	C		;only look at 11 digits.
 705: 3837+10	E82F  C208E8  		JP	NZ,DECODE1
 706: 3847+10	E832  C9      		RET	
 707: 3857+7	E833  7E      	DECODE3:LD	A,(HL)		;spaces must follow (why?).
 708: 3864+7	E834  FE20    		CP	' '
 709: 3871+10	E836  C209E6  		JP	NZ,SYNERR
 710: 3881+6	E839  23      		INC	HL
 711: 3887+4	E83A  0D      	DECODE4:DEC	C
 712: 3891+10	E83B  C233E8  		JP	NZ,DECODE3
 713: 3901+4	E83E  78      		LD	A,B		;set (A)=the numeric value entered.
 714: 3905+10	E83F  C9      		RET	
 715:				;
 716:				;   Move 3 bytes from (HL) to (DE). Note that there is only
 717:				; one reference to this at (A2D5h).
 718:				;
 719: 3915+7	E840  0603    	MOVE3:	LD	B,3
 720:				;
 721:				;   Move (B) bytes from (HL) to (DE).
 722:				;
 723: 3922+7	E842  7E      	HL2DE:	LD	A,(HL)
 724: 3929+7	E843  12      		LD	(DE),A
 725: 3936+6	E844  23      		INC	HL
 726: 3942+6	E845  13      		INC	DE
 727: 3948+4	E846  05      		DEC	B
 728: 3952+10	E847  C242E8  		JP	NZ,HL2DE
 729: 3962+10	E84A  C9      		RET	
 730:				;
 731:				;   Compute (HL)=(TBUFF)+(A)+(C) and get the byte that's here.
 732:				;
 733: 3972+10	E84B  218000  	EXTRACT:LD	HL,TBUFF
 734: 3982+4	E84E  81      		ADD	A,C
 735: 3986+17	E84F  CD59E6  		CALL	ADDHL
 736: 4003+7	E852  7E      		LD	A,(HL)
 737: 4010+10	E853  C9      		RET	
 738:				;
 739:				;  Check drive specified. If it means a change, then the new
 740:				; drive will be selected. In any case, the drive byte of the
 741:				; fcb will be set to null (means use current drive).
 742:				;
 743: 4020+4	E854  AF      	DSELECT:XOR	A		;null out first byte of fcb.
 744: 4024+13	E855  32CDEB  		LD	(_FCB),A
 745: 4037+13	E858  3AF0EB  		LD	A,(CHGDRV)	;a drive change indicated?
 746: 4050+4	E85B  B7      		OR	A
 747: 4054+5+6	E85C  C8      		RET	Z
 748: 4059+4	E85D  3D      		DEC	A		;yes, is it the same as the current drive?
 749: 4063+10	E85E  21EFEB  		LD	HL,CDRIVE
 750: 4073+7	E861  BE      		CP	(HL)
 751: 4080+5+6	E862  C8      		RET	Z
 752: 4085+10	E863  C3BDE4  		JP	DSKSEL		;no. Select it then.
 753:				;
 754:				;   Check the drive selection and reset it to the previous
 755:				; drive if it was changed for the preceeding command.
 756:				;
 757: 4095+13	E866  3AF0EB  	RESETDR:LD	A,(CHGDRV)	;drive change indicated?
 758: 4108+4	E869  B7      		OR	A
 759: 4112+5+6	E86A  C8      		RET	Z
 760: 4117+4	E86B  3D      		DEC	A		;yes, was it a different drive?
 761: 4121+10	E86C  21EFEB  		LD	HL,CDRIVE
 762: 4131+7	E86F  BE      		CP	(HL)
 763: 4138+5+6	E870  C8      		RET	Z
 764: 4143+13	E871  3AEFEB  		LD	A,(CDRIVE)	;yes, re-select our old drive.
 765: 4156+10	E874  C3BDE4  		JP	DSKSEL
 766:				;
 767:				;**************************************************************
 768:				;*
 769:				;*           D I R E C T O R Y   C O M M A N D
 770:				;*
 771:				;**************************************************************
 772:				;
 773: 4166+17	E877  CD5EE6  	DIRECT:	CALL	CONVFST		;convert file name.
 774: 4183+17	E87A  CD54E8  		CALL	DSELECT		;select indicated drive.
 775: 4200+10	E87D  21CEEB  		LD	HL,_FCB+1	;was any file indicated?
 776: 4210+7	E880  7E      		LD	A,(HL)
 777: 4217+7	E881  FE20    		CP	' '
 778: 4224+10	E883  C28FE8  		JP	NZ,DIRECT2
 779: 4234+7	E886  060B    		LD	B,11		;no. Fill field with '?' - same as *.*.
 780: 4241+10	E888  363F    	DIRECT1:LD	(HL),'?'
 781: 4251+6	E88A  23      		INC	HL
 782: 4257+4	E88B  05      		DEC	B
 783: 4261+10	E88C  C288E8  		JP	NZ,DIRECT1
 784: 4271+7	E88F  1E00    	DIRECT2:LD	E,0		;set initial cursor position.
 785: 4278+11	E891  D5      		PUSH	DE
 786: 4289+17	E892  CDE9E4  		CALL	SRCHFCB		;get first file name.
 787: 4306+10+7	E895  CCEAE7  		CALL	Z,NONE		;none found at all?
 788: 4316+10	E898  CA1BE9  	DIRECT3:JP	Z,DIRECT9	;terminate if no more names.
 789: 4326+13	E89B  3AEEEB  		LD	A,(RTNCODE)	;get file's position in segment (0-3).
 790: 4339+4	E89E  0F      		RRCA	
 791: 4343+4	E89F  0F      		RRCA	
 792: 4347+4	E8A0  0F      		RRCA	
 793: 4351+7	E8A1  E660    		AND	60H		;(A)=position*32
 794: 4358+4	E8A3  4F      		LD	C,A
 795: 4362+7	E8A4  3E0A    		LD	A,10
 796: 4369+17	E8A6  CD4BE8  		CALL	EXTRACT		;extract the tenth entry in fcb.
 797: 4386+4	E8A9  17      		RLA			;check system file status bit.
 798: 4390+10	E8AA  DA0FE9  		JP	C,DIRECT8	;we don't list them.
 799: 4400+10	E8AD  D1      		POP	DE
 800: 4410+4	E8AE  7B      		LD	A,E		;bump name count.
 801: 4414+4	E8AF  1C      		INC	E
 802: 4418+11	E8B0  D5      		PUSH	DE
 803: 4429+7	E8B1  E603    		AND	03H		;at end of line?
 804: 4436+11	E8B3  F5      		PUSH	AF
 805: 4447+10	E8B4  C2CCE8  		JP	NZ,DIRECT4
 806: 4457+17	E8B7  CD98E4  		CALL	CRLF		;yes, end this line and start another.
 807: 4474+11	E8BA  C5      		PUSH	BC
 808: 4485+17	E8BB  CDD0E5  		CALL	GETDSK		;start line with ('A:').
 809: 4502+10	E8BE  C1      		POP	BC
 810: 4512+7	E8BF  C641    		ADD	A,'A'
 811: 4519+17	E8C1  CD92E4  		CALL	PRINTB
 812: 4536+7	E8C4  3E3A    		LD	A,':'
 813: 4543+17	E8C6  CD92E4  		CALL	PRINTB
 814: 4560+10	E8C9  C3D4E8  		JP	DIRECT5
 815: 4570+17	E8CC  CDA2E4  	DIRECT4:CALL	SPACE		;add seperator between file names.
 816: 4587+7	E8CF  3E3A    		LD	A,':'
 817: 4594+17	E8D1  CD92E4  		CALL	PRINTB
 818: 4611+17	E8D4  CDA2E4  	DIRECT5:CALL	SPACE
 819: 4628+7	E8D7  0601    		LD	B,1		;'extract' each file name character at a time.
 820: 4635+4	E8D9  78      	DIRECT6:LD	A,B
 821: 4639+17	E8DA  CD4BE8  		CALL	EXTRACT
 822: 4656+7	E8DD  E67F    		AND	7FH		;strip bit 7 (status bit).
 823: 4663+7	E8DF  FE20    		CP	' '		;are we at the end of the name?
 824: 4670+10	E8E1  C2F9E8  		JP	NZ,DRECT65
 825: 4680+10	E8E4  F1      		POP	AF		;yes, don't print spaces at the end of a line.
 826: 4690+11	E8E5  F5      		PUSH	AF
 827: 4701+7	E8E6  FE03    		CP	3
 828: 4708+10	E8E8  C2F7E8  		JP	NZ,DRECT63
 829: 4718+7	E8EB  3E09    		LD	A,9		;first check for no extension.
 830: 4725+17	E8ED  CD4BE8  		CALL	EXTRACT
 831: 4742+7	E8F0  E67F    		AND	7FH
 832: 4749+7	E8F2  FE20    		CP	' '
 833: 4756+10	E8F4  CA0EE9  		JP	Z,DIRECT7	;don't print spaces.
 834: 4766+7	E8F7  3E20    	DRECT63:LD	A,' '		;else print them.
 835: 4773+17	E8F9  CD92E4  	DRECT65:CALL	PRINTB
 836: 4790+4	E8FC  04      		INC	B		;bump to next character psoition.
 837: 4794+4	E8FD  78      		LD	A,B
 838: 4798+7	E8FE  FE0C    		CP	12		;end of the name?
 839: 4805+10	E900  D20EE9  		JP	NC,DIRECT7
 840: 4815+7	E903  FE09    		CP	9		;nope, starting extension?
 841: 4822+10	E905  C2D9E8  		JP	NZ,DIRECT6
 842: 4832+17	E908  CDA2E4  		CALL	SPACE		;yes, add seperating space.
 843: 4849+10	E90B  C3D9E8  		JP	DIRECT6
 844: 4859+10	E90E  F1      	DIRECT7:POP	AF		;get the next file name.
 845: 4869+17	E90F  CDC2E5  	DIRECT8:CALL	CHKCON		;first check console, quit on anything.
 846: 4886+10	E912  C21BE9  		JP	NZ,DIRECT9
 847: 4896+17	E915  CDE4E4  		CALL	SRCHNXT		;get next name.
 848: 4913+10	E918  C398E8  		JP	DIRECT3		;and continue with our list.
 849: 4923+10	E91B  D1      	DIRECT9:POP	DE		;restore the stack and return to command level.
 850: 4933+10	E91C  C386EB  		JP	GETBACK
 851:				;
 852:				;**************************************************************
 853:				;*
 854:				;*                E R A S E   C O M M A N D
 855:				;*
 856:				;**************************************************************
 857:				;
 858: 4943+17	E91F  CD5EE6  	ERASE:	CALL	CONVFST		;convert file name.
 859: 4960+7	E922  FE0B    		CP	11		;was '*.*' entered?
 860: 4967+10	E924  C242E9  		JP	NZ,ERASE1
 861: 4977+10	E927  0152E9  		LD	BC,YESNO	;yes, ask for confirmation.
 862: 4987+17	E92A  CDA7E4  		CALL	PLINE
 863: 5004+17	E92D  CD39E5  		CALL	GETINP
 864: 5021+10	E930  2107E4  		LD	HL,INBUFF+1
 865: 5031+11	E933  35      		DEC	(HL)		;must be exactly 'y'.
 866: 5042+10	E934  C282E7  		JP	NZ,CMMND1
 867: 5052+6	E937  23      		INC	HL
 868: 5058+7	E938  7E      		LD	A,(HL)
 869: 5065+7	E939  FE59    		CP	'Y'
 870: 5072+10	E93B  C282E7  		JP	NZ,CMMND1
 871: 5082+6	E93E  23      		INC	HL
 872: 5088+16	E93F  2288E4  		LD	(INPOINT),HL	;save input line pointer.
 873: 5104+17	E942  CD54E8  	ERASE1:	CALL	DSELECT		;select desired disk.
 874: 5121+10	E945  11CDEB  		LD	DE,_FCB
 875: 5131+17	E948  CDEFE4  		CALL	DELETE		;delete the file.
 876: 5148+4	E94B  3C      		INC	A
 877: 5152+10+7	E94C  CCEAE7  		CALL	Z,NONE		;not there?
 878: 5162+10	E94F  C386EB  		JP	GETBACK		;return to command level now.
 879:     -	E952  416C6C20	YESNO:	DEFB	'All (y/n)?',0
	              28792F6E
	              293F00
 880:				;
 881:				;**************************************************************
 882:				;*
 883:				;*            T Y P E   C O M M A N D
 884:				;*
 885:				;**************************************************************
 886:				;
 887: 5172+17	E95D  CD5EE6  	TYPE:	CALL	CONVFST		;convert file name.
 888: 5189+10	E960  C209E6  		JP	NZ,SYNERR	;wild cards not allowed.
 889: 5199+17	E963  CD54E8  		CALL	DSELECT		;select indicated drive.
 890: 5216+17	E966  CDD0E4  		CALL	OPENFCB		;open the file.
 891: 5233+10	E969  CAA7E9  		JP	Z,TYPE5		;not there?
 892: 5243+17	E96C  CD98E4  		CALL	CRLF		;ok, start a new line on the screen.
 893: 5260+10	E96F  21F1EB  		LD	HL,NBYTES	;initialize byte counter.
 894: 5270+10	E972  36FF    		LD	(HL),0FFH	;set to read first sector.
 895: 5280+10	E974  21F1EB  	TYPE1:	LD	HL,NBYTES
 896: 5290+7	E977  7E      	TYPE2:	LD	A,(HL)		;have we written the entire sector?
 897: 5297+7	E978  FE80    		CP	128
 898: 5304+10	E97A  DA87E9  		JP	C,TYPE3
 899: 5314+11	E97D  E5      		PUSH	HL		;yes, read in the next one.
 900: 5325+17	E97E  CDFEE4  		CALL	READFCB
 901: 5342+10	E981  E1      		POP	HL
 902: 5352+10	E982  C2A0E9  		JP	NZ,TYPE4	;end or error?
 903: 5362+4	E985  AF      		XOR	A		;ok, clear byte counter.
 904: 5366+7	E986  77      		LD	(HL),A
 905: 5373+11	E987  34      	TYPE3:	INC	(HL)		;count this byte.
 906: 5384+10	E988  218000  		LD	HL,TBUFF	;and get the (A)th one from the buffer (TBUFF).
 907: 5394+17	E98B  CD59E6  		CALL	ADDHL
 908: 5411+7	E98E  7E      		LD	A,(HL)
 909: 5418+7	E98F  FE1A    		CP	CNTRLZ		;end of file mark?
 910: 5425+10	E991  CA86EB  		JP	Z,GETBACK
 911: 5435+17	E994  CD8CE4  		CALL	PRINT		;no, print it.
 912: 5452+17	E997  CDC2E5  		CALL	CHKCON		;check console, quit if anything ready.
 913: 5469+10	E99A  C286EB  		JP	NZ,GETBACK
 914: 5479+10	E99D  C374E9  		JP	TYPE1
 915:				;
 916:				;   Get here on an end of file or read error.
 917:				;
 918: 5489+4	E9A0  3D      	TYPE4:	DEC	A		;read error?
 919: 5493+10	E9A1  CA86EB  		JP	Z,GETBACK
 920: 5503+17	E9A4  CDD9E7  		CALL	RDERROR		;yes, print message.
 921: 5520+17	E9A7  CD66E8  	TYPE5:	CALL	RESETDR		;and reset proper drive
 922: 5537+10	E9AA  C309E6  		JP	SYNERR		;now print file name with problem.
 923:				;
 924:				;**************************************************************
 925:				;*
 926:				;*            S A V E   C O M M A N D
 927:				;*
 928:				;**************************************************************
 929:				;
 930: 5547+17	E9AD  CDF8E7  	SAVE:	CALL	DECODE		;get numeric number that follows SAVE.
 931: 5564+11	E9B0  F5      		PUSH	AF		;save number of pages to write.
 932: 5575+17	E9B1  CD5EE6  		CALL	CONVFST		;convert file name.
 933: 5592+10	E9B4  C209E6  		JP	NZ,SYNERR	;wild cards not allowed.
 934: 5602+17	E9B7  CD54E8  		CALL	DSELECT		;select specified drive.
 935: 5619+10	E9BA  11CDEB  		LD	DE,_FCB		;now delete this file.
 936: 5629+11	E9BD  D5      		PUSH	DE
 937: 5640+17	E9BE  CDEFE4  		CALL	DELETE
 938: 5657+10	E9C1  D1      		POP	DE
 939: 5667+17	E9C2  CD09E5  		CALL	CREATE		;and create it again.
 940: 5684+10	E9C5  CAFBE9  		JP	Z,SAVE3		;can't create?
 941: 5694+4	E9C8  AF      		XOR	A		;clear record number byte.
 942: 5698+13	E9C9  32EDEB  		LD	(_FCB+32),A
 943: 5711+10	E9CC  F1      		POP	AF		;convert pages to sectors.
 944: 5721+4	E9CD  6F      		LD	L,A
 945: 5725+7	E9CE  2600    		LD	H,0
 946: 5732+11	E9D0  29      		ADD	HL,HL		;(HL)=number of sectors to write.
 947: 5743+10	E9D1  110001  		LD	DE,TBASE	;and we start from here.
 948: 5753+4	E9D4  7C      	SAVE1:	LD	A,H		;done yet?
 949: 5757+4	E9D5  B5      		OR	L
 950: 5761+10	E9D6  CAF1E9  		JP	Z,SAVE2
 951: 5771+6	E9D9  2B      		DEC	HL		;nope, count this and compute the start
 952: 5777+11	E9DA  E5      		PUSH	HL		;of the next 128 byte sector.
 953: 5788+10	E9DB  218000  		LD	HL,128
 954: 5798+11	E9DE  19      		ADD	HL,DE
 955: 5809+11	E9DF  E5      		PUSH	HL		;save it and set the transfer address.
 956: 5820+17	E9E0  CDD8E5  		CALL	DMASET
 957: 5837+10	E9E3  11CDEB  		LD	DE,_FCB		;write out this sector now.
 958: 5847+17	E9E6  CD04E5  		CALL	WRTREC
 959: 5864+10	E9E9  D1      		POP	DE		;reset (DE) to the start of the last sector.
 960: 5874+10	E9EA  E1      		POP	HL		;restore sector count.
 961: 5884+10	E9EB  C2FBE9  		JP	NZ,SAVE3	;write error?
 962: 5894+10	E9EE  C3D4E9  		JP	SAVE1
 963:				;
 964:				;   Get here after writing all of the file.
 965:				;
 966: 5904+10	E9F1  11CDEB  	SAVE2:	LD	DE,_FCB		;now close the file.
 967: 5914+17	E9F4  CDDAE4  		CALL	CLOSE
 968: 5931+4	E9F7  3C      		INC	A		;did it close ok?
 969: 5935+10	E9F8  C201EA  		JP	NZ,SAVE4
 970:				;
 971:				;   Print out error message (no space).
 972:				;
 973: 5945+10	E9FB  0107EA  	SAVE3:	LD	BC,NOSPACE
 974: 5955+17	E9FE  CDA7E4  		CALL	PLINE
 975: 5972+17	EA01  CDD5E5  	SAVE4:	CALL	STDDMA		;reset the standard dma address.
 976: 5989+10	EA04  C386EB  		JP	GETBACK
 977:     -	EA07  4E6F2073	NOSPACE:DEFB	'No space',0
	              70616365
	              00
 978:				;
 979:				;**************************************************************
 980:				;*
 981:				;*           R E N A M E   C O M M A N D
 982:				;*
 983:				;**************************************************************
 984:				;
 985: 5999+17	EA10  CD5EE6  	RENAME:	CALL	CONVFST		;convert first file name.
 986: 6016+10	EA13  C209E6  		JP	NZ,SYNERR	;wild cards not allowed.
 987: 6026+13	EA16  3AF0EB  		LD	A,(CHGDRV)	;remember any change in drives specified.
 988: 6039+11	EA19  F5      		PUSH	AF
 989: 6050+17	EA1A  CD54E8  		CALL	DSELECT		;and select this drive.
 990: 6067+17	EA1D  CDE9E4  		CALL	SRCHFCB		;is this file present?
 991: 6084+10	EA20  C279EA  		JP	NZ,RENAME6	;yes, print error message.
 992: 6094+10	EA23  21CDEB  		LD	HL,_FCB		;yes, move this name into second slot.
 993: 6104+10	EA26  11DDEB  		LD	DE,_FCB+16
 994: 6114+7	EA29  0610    		LD	B,16
 995: 6121+17	EA2B  CD42E8  		CALL	HL2DE
 996: 6138+16	EA2E  2A88E4  		LD	HL,(INPOINT)	;get input pointer.
 997: 6154+4	EA31  EB      		EX	DE,HL
 998: 6158+17	EA32  CD4FE6  		CALL	NONBLANK	;get next non blank character.
 999: 6175+7	EA35  FE3D    		CP	'='		;only allow an '=' or '_' seperator.
1000: 6182+10	EA37  CA3FEA  		JP	Z,RENAME1
1001: 6192+7	EA3A  FE5F    		CP	'_'
1002: 6199+10	EA3C  C273EA  		JP	NZ,RENAME5
1003: 6209+4	EA3F  EB      	RENAME1:EX	DE,HL
1004: 6213+6	EA40  23      		INC	HL		;ok, skip seperator.
1005: 6219+16	EA41  2288E4  		LD	(INPOINT),HL	;save input line pointer.
1006: 6235+17	EA44  CD5EE6  		CALL	CONVFST		;convert this second file name now.
1007: 6252+10	EA47  C273EA  		JP	NZ,RENAME5	;again, no wild cards.
1008: 6262+10	EA4A  F1      		POP	AF		;if a drive was specified, then it
1009: 6272+4	EA4B  47      		LD	B,A		;must be the same as before.
1010: 6276+10	EA4C  21F0EB  		LD	HL,CHGDRV
1011: 6286+7	EA4F  7E      		LD	A,(HL)
1012: 6293+4	EA50  B7      		OR	A
1013: 6297+10	EA51  CA59EA  		JP	Z,RENAME2
1014: 6307+4	EA54  B8      		CP	B
1015: 6311+7	EA55  70      		LD	(HL),B
1016: 6318+10	EA56  C273EA  		JP	NZ,RENAME5	;they were different, error.
1017: 6328+7	EA59  70      	RENAME2:LD	(HL),B		;	reset as per the first file specification.
1018: 6335+4	EA5A  AF      		XOR	A
1019: 6339+13	EA5B  32CDEB  		LD	(_FCB),A		;clear the drive byte of the fcb.
1020: 6352+17	EA5E  CDE9E4  	RENAME3:CALL	SRCHFCB		;and go look for second file.
1021: 6369+10	EA61  CA6DEA  		JP	Z,RENAME4	;doesn't exist?
1022: 6379+10	EA64  11CDEB  		LD	DE,_FCB
1023: 6389+17	EA67  CD0EE5  		CALL	RENAM		;ok, rename the file.
1024: 6406+10	EA6A  C386EB  		JP	GETBACK
1025:				;
1026:				;   Process rename errors here.
1027:				;
1028: 6416+17	EA6D  CDEAE7  	RENAME4:CALL	NONE		;file not there.
1029: 6433+10	EA70  C386EB  		JP	GETBACK
1030: 6443+17	EA73  CD66E8  	RENAME5:CALL	RESETDR		;bad command format.
1031: 6460+10	EA76  C309E6  		JP	SYNERR
1032: 6470+10	EA79  0182EA  	RENAME6:LD	BC,EXISTS	;destination file already exists.
1033: 6480+17	EA7C  CDA7E4  		CALL	PLINE
1034: 6497+10	EA7F  C386EB  		JP	GETBACK
1035:     -	EA82  46696C65	EXISTS:	DEFB	'File exists',0
	              20657869
	              73747300
1036:				;
1037:				;**************************************************************
1038:				;*
1039:				;*             U S E R   C O M M A N D
1040:				;*
1041:				;**************************************************************
1042:				;
1043: 6507+17	EA8E  CDF8E7  	USER:	CALL	DECODE		;get numeric value following command.
1044: 6524+7	EA91  FE10    		CP	16		;legal user number?
1045: 6531+10	EA93  D209E6  		JP	NC,SYNERR
1046: 6541+4	EA96  5F      		LD	E,A		;yes but is there anything else?
1047: 6545+13	EA97  3ACEEB  		LD	A,(_FCB+1)
1048: 6558+7	EA9A  FE20    		CP	' '
1049: 6565+10	EA9C  CA09E6  		JP	Z,SYNERR	;yes, that is not allowed.
1050: 6575+17	EA9F  CD15E5  		CALL	GETSETUC	;ok, set user code.
1051: 6592+10	EAA2  C389EB  		JP	GETBACK1
1052:				;
1053:				;**************************************************************
1054:				;*
1055:				;*        T R A N S I A N T   P R O G R A M   C O M M A N D
1056:				;*
1057:				;**************************************************************
1058:				;
1059: 6602+17	EAA5  CDF5E5  	UNKNOWN:CALL	VERIFY		;check for valid system (why?).
1060: 6619+13	EAA8  3ACEEB  		LD	A,(_FCB+1)	;anything to execute?
1061: 6632+7	EAAB  FE20    		CP	' '
1062: 6639+10	EAAD  C2C4EA  		JP	NZ,UNKWN1
1063: 6649+13	EAB0  3AF0EB  		LD	A,(CHGDRV)	;nope, only a drive change?
1064: 6662+4	EAB3  B7      		OR	A
1065: 6666+10	EAB4  CA89EB  		JP	Z,GETBACK1	;neither???
1066: 6676+4	EAB7  3D      		DEC	A
1067: 6680+13	EAB8  32EFEB  		LD	(CDRIVE),A	;ok, store new drive.
1068: 6693+17	EABB  CD29E5  		CALL	MOVECD		;set (TDRIVE) also.
1069: 6710+17	EABE  CDBDE4  		CALL	DSKSEL		;and select this drive.
1070: 6727+10	EAC1  C389EB  		JP	GETBACK1	;then return.
1071:				;
1072:				;   Here a file name was typed. Prepare to execute it.
1073:				;
1074: 6737+10	EAC4  11D6EB  	UNKWN1:	LD	DE,_FCB+9	;an extension specified?
1075: 6747+7	EAC7  1A      		LD	A,(DE)
1076: 6754+7	EAC8  FE20    		CP	' '
1077: 6761+10	EACA  C209E6  		JP	NZ,SYNERR	;yes, not allowed.
1078: 6771+11	EACD  D5      	UNKWN2:	PUSH	DE
1079: 6782+17	EACE  CD54E8  		CALL	DSELECT		;select specified drive.
1080: 6799+10	EAD1  D1      		POP	DE
1081: 6809+10	EAD2  2183EB  		LD	HL,COMFILE	;set the extension to 'COM'.
1082: 6819+17	EAD5  CD40E8  		CALL	MOVE3
1083: 6836+17	EAD8  CDD0E4  		CALL	OPENFCB		;and open this file.
1084: 6853+10	EADB  CA6BEB  		JP	Z,UNKWN9	;not present?
1085:				;
1086:				;   Load in the program.
1087:				;
1088: 6863+10	EADE  210001  		LD	HL,TBASE	;store the program starting here.
1089: 6873+11	EAE1  E5      	UNKWN3:	PUSH	HL
1090: 6884+4	EAE2  EB      		EX	DE,HL
1091: 6888+17	EAE3  CDD8E5  		CALL	DMASET		;set transfer address.
1092: 6905+10	EAE6  11CDEB  		LD	DE,_FCB		;and read the next record.
1093: 6915+17	EAE9  CDF9E4  		CALL	RDREC
1094: 6932+10	EAEC  C201EB  		JP	NZ,UNKWN4	;end of file or read error?
1095: 6942+10	EAEF  E1      		POP	HL		;nope, bump pointer for next sector.
1096: 6952+10	EAF0  118000  		LD	DE,128
1097: 6962+11	EAF3  19      		ADD	HL,DE
1098: 6973+10	EAF4  1100E4  		LD	DE,CBASE	;enough room for the whole file?
1099: 6983+4	EAF7  7D      		LD	A,L
1100: 6987+4	EAF8  93      		SUB	E
1101: 6991+4	EAF9  7C      		LD	A,H
1102: 6995+4	EAFA  9A      		SBC	A,D
1103: 6999+10	EAFB  D271EB  		JP	NC,UNKWN0	;no, it can't fit.
1104: 7009+10	EAFE  C3E1EA  		JP	UNKWN3
1105:				;
1106:				;   Get here after finished reading.
1107:				;
1108: 7019+10	EB01  E1      	UNKWN4:	POP	HL
1109: 7029+4	EB02  3D      		DEC	A		;normal end of file?
1110: 7033+10	EB03  C271EB  		JP	NZ,UNKWN0
1111: 7043+17	EB06  CD66E8  		CALL	RESETDR		;yes, reset previous drive.
1112: 7060+17	EB09  CD5EE6  		CALL	CONVFST		;convert the first file name that follows
1113: 7077+10	EB0C  21F0EB  		LD	HL,CHGDRV	;command name.
1114: 7087+11	EB0F  E5      		PUSH	HL
1115: 7098+7	EB10  7E      		LD	A,(HL)		;set drive code in default fcb.
1116: 7105+13	EB11  32CDEB  		LD	(_FCB),A
1117: 7118+7	EB14  3E10    		LD	A,16		;put second name 16 bytes later.
1118: 7125+17	EB16  CD60E6  		CALL	CONVERT		;convert second file name.
1119: 7142+10	EB19  E1      		POP	HL
1120: 7152+7	EB1A  7E      		LD	A,(HL)		;and set the drive for this second file.
1121: 7159+13	EB1B  32DDEB  		LD	(_FCB+16),A
1122: 7172+4	EB1E  AF      		XOR	A		;clear record byte in fcb.
1123: 7176+13	EB1F  32EDEB  		LD	(_FCB+32),A
1124: 7189+10	EB22  115C00  		LD	DE,TFCB		;move it into place at(005Ch).
1125: 7199+10	EB25  21CDEB  		LD	HL,_FCB
1126: 7209+7	EB28  0621    		LD	B,33
1127: 7216+17	EB2A  CD42E8  		CALL	HL2DE
1128: 7233+10	EB2D  2108E4  		LD	HL,INBUFF+2	;now move the remainder of the input
1129: 7243+7	EB30  7E      	UNKWN5:	LD	A,(HL)		;line down to (0080h). Look for a non blank.
1130: 7250+4	EB31  B7      		OR	A		;or a null.
1131: 7254+10	EB32  CA3EEB  		JP	Z,UNKWN6
1132: 7264+7	EB35  FE20    		CP	' '
1133: 7271+10	EB37  CA3EEB  		JP	Z,UNKWN6
1134: 7281+6	EB3A  23      		INC	HL
1135: 7287+10	EB3B  C330EB  		JP	UNKWN5
1136:				;
1137:				;   Do the line move now. It ends in a null byte.
1138:				;
1139: 7297+7	EB3E  0600    	UNKWN6:	LD	B,0		;keep a character count.
1140: 7304+10	EB40  118100  		LD	DE,TBUFF+1	;data gets put here.
1141: 7314+7	EB43  7E      	UNKWN7:	LD	A,(HL)		;move it now.
1142: 7321+7	EB44  12      		LD	(DE),A
1143: 7328+4	EB45  B7      		OR	A
1144: 7332+10	EB46  CA4FEB  		JP	Z,UNKWN8
1145: 7342+4	EB49  04      		INC	B
1146: 7346+6	EB4A  23      		INC	HL
1147: 7352+6	EB4B  13      		INC	DE
1148: 7358+10	EB4C  C343EB  		JP	UNKWN7
1149: 7368+4	EB4F  78      	UNKWN8:	LD	A,B		;now store the character count.
1150: 7372+13	EB50  328000  		LD	(TBUFF),A
1151: 7385+17	EB53  CD98E4  		CALL	CRLF		;clean up the screen.
1152: 7402+17	EB56  CDD5E5  		CALL	STDDMA		;set standard transfer address.
1153: 7419+17	EB59  CD1AE5  		CALL	SETCDRV		;reset current drive.
1154: 7436+17	EB5C  CD0001  		CALL	TBASE		;and execute the program.
1155:				;
1156:				;   Transiant programs return here (or reboot).
1157:				;
1158: 7453+10	EB5F  31ABEB  		LD	SP,BATCH	;set stack first off.
1159: 7463+17	EB62  CD29E5  		CALL	MOVECD		;move current drive into place (TDRIVE).
1160: 7480+17	EB65  CDBDE4  		CALL	DSKSEL		;and reselect it.
1161: 7497+10	EB68  C382E7  		JP	CMMND1		;back to comand mode.
1162:				;
1163:				;   Get here if some error occured.
1164:				;
1165: 7507+17	EB6B  CD66E8  	UNKWN9:	CALL	RESETDR		;inproper format.
1166: 7524+10	EB6E  C309E6  		JP	SYNERR
1167: 7534+10	EB71  017AEB  	UNKWN0:	LD	BC,BADLOAD	;read error or won't fit.
1168: 7544+17	EB74  CDA7E4  		CALL	PLINE
1169: 7561+10	EB77  C386EB  		JP	GETBACK
1170:     -	EB7A  42616420	BADLOAD:DEFB	'Bad load',0
	              6C6F6164
	              00
1171:     -	EB83  434F4D  	COMFILE:DEFB	'COM'		;command file extension.
1172:				;
1173:				;   Get here to return to command level. We will reset the
1174:				; previous active drive and then either return to command
1175:				; level directly or print error message and then return.
1176:				;
1177: 7571+17	EB86  CD66E8  	GETBACK:CALL	RESETDR		;reset previous drive.
1178: 7588+17	EB89  CD5EE6  	GETBACK1: CALL	CONVFST		;convert first name in (_FCB).
1179: 7605+13	EB8C  3ACEEB  		LD	A,(_FCB+1)	;if this was just a drive change request,
1180: 7618+7	EB8F  D620    		SUB	' '		;make sure it was valid.
1181: 7625+10	EB91  21F0EB  		LD	HL,CHGDRV
1182: 7635+7	EB94  B6      		OR	(HL)
1183: 7642+10	EB95  C209E6  		JP	NZ,SYNERR
1184: 7652+10	EB98  C382E7  		JP	CMMND1		;ok, return to command level.
1185:				;
1186:				;   ccp stack area.
1187:				;
1188:     -	EB9B  00000000		DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	              00000000
	              00000000
	              00000000
1189:     -	EBAB          	CCPSTACK EQU	$	;end of ccp stack area.
1190:				;
1191:				;   Batch (or SUBMIT) processing information storage.
1192:				;
1193:     -	EBAB  00      	BATCH:	DEFB	0		;batch mode flag (0=not active).
1194:     -	EBAC  00242424	BATCHFCB: DEFB	0,'$$$     SUB',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	              20202020
	              20535542
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00
1195:				;
1196:				;   File control block setup by the CCP.
1197:				;
1198:     -	EBCD  00202020	_FCB:	DEFB	0,'           ',0,0,0,0,0,'           ',0,0,0,0,0
	              20202020
	              20202020
	              00000000
	              00202020
	              20202020
	              20202020
	              00000000
	              00
1199:     -	EBEE  00      	RTNCODE:DEFB	0		;status returned from bdos call.
1200:     -	EBEF  00      	CDRIVE:	DEFB	0		;currently active drive.
1201:     -	EBF0  00      	CHGDRV:	DEFB	0		;change in drives flag (0=no change).
1202:     -	EBF1  0000    	NBYTES:	DW	0		;byte counter used by TYPE.
1203:				;
1204:				;   Room for expansion?
1205:				;
1206:     -	EBF3 ..EBFF 00		DS	BDOS - 6 - $,0
1207:				
1208:     -	EC00          	PATTRN2:
1209:				
1210:     -	0000          	.if $ <> BDOS-6
1211:					.error
1212:				.endif
1213:     -	EC00          	_CCPEND	equ $
1214:     -	EC00          		END



Statistics:

     4	passes
     0	jr promotions
   201	symbols
  2048	bytes

     1	macro calls
    26	macro bytes
     0	invented symbols



Symbol Table:

ADDHL           E659      58969
BADLOAD         EB7A      60282
BATCH           EBAB      60331
BATCHFCB        EBAC      60332
BDOS           =EC06      60422
BIAS           =B000      45056
BIOS           =FA00      64000
BOOT           =FA00      64000
BS             =08        8
CBASE           E400      58368
CCP            =E400      58368
CCPSTACK       =EBAB      60331
CDISK          =04        4
CDRIVE          EBEF      60399
CHECK           E630      58928
CHGDRV          EBF0      60400
CHKCON          E5C2      58818
CLEARBUF        E758      59224
CLOSE           E4DA      58586
CMDADR          E7C1      59329
CMDTBL          E710      59152
CMMND1          E782      59266
CMMND2          E798      59288
CNTRLC         =03        3
CNTRLE         =05        5
CNTRLP         =10        16
CNTRLR         =12        18
CNTRLS         =13        19
CNTRLU         =15        21
CNTRLX         =18        24
CNTRLZ         =1A        26
COMFILE         EB83      60291
COMMAND         E75C      59228
CONIN          =FA09      64009
CONOUT         =FA0C      64012
CONST          =FA06      64006
CONVERT         E660      58976
CONVFST         E65E      58974
CONVRT1         E689      59017
CONVRT2         E690      59024
CONVRT3         E696      59030
CONVRT4         E698      59032
CONVRT5         E6A9      59049
CONVRT6         E6AB      59051
CONVRT7         E6AF      59055
CONVRT8         E6B9      59065
CR             =0D        13
CREATE          E509      58633
CRLF            E498      58520
DECODE          E7F8      59384
DECODE1         E808      59400
DECODE2         E82A      59434
DECODE3         E833      59443
DECODE4         E83A      59450
DEL            =7F        127
DELBATCH        E5DD      58845
DELETE          E4EF      58607
DIRECT          E877      59511
DIRECT1         E888      59528
DIRECT2         E88F      59535
DIRECT3         E898      59544
DIRECT4         E8CC      59596
DIRECT5         E8D4      59604
DIRECT6         E8D9      59609
DIRECT7         E90E      59662
DIRECT8         E90F      59663
DIRECT9         E91B      59675
DMASET          E5D8      58840
DRECT63         E8F7      59639
DRECT65         E8F9      59641
DSELECT         E854      59476
DSKSEL          E4BD      58557
ENTRY          =05        5
ENTRY1          E4C3      58563
ENTRY2          E4F4      58612
ERASE           E91F      59679
ERASE1          E942      59714
EXISTS          EA82      60034
EXTRACT         E84B      59467
FF             =0C        12
GETBACK         EB86      60294
GETBACK1        EB89      60297
GETDSK          E5D0      58832
GETEXT          E6C0      59072
GETEXT1         E6C8      59080
GETEXT2         E6D9      59097
GETEXT3         E6DB      59099
GETEXT4         E6DF      59103
GETEXT5         E6E9      59113
GETEXT6         E6F0      59120
GETEXT7         E6F2      59122
GETEXT8         E701      59137
GETEXT9         E709      59145
GETINP          E539      58681
GETINP1         E596      58774
GETINP2         E5A7      58791
GETINP3         E5AB      58795
GETINP4         E5BA      58810
GETSETUC        E515      58645
GETUSR          E513      58643
HALT            E7CF      59343
HL2DE           E842      59458
HOME           =FA18      64024
INBUFF          E406      58374
INPOINT         E488      58504
IOBYTE         =03        3
LF             =0A        10
LISTST         =FA2D      64045
MEM            =40        64
MOVE3           E840      59456
MOVECD          E529      58665
NAMEPNT         E48A      58506
NBYTES          EBF1      60401
NOFILE          E7F0      59376
NONBLANK        E64F      58959
NONE            E7EA      59370
NOSPACE         EA07      59911
NUMCMDS        =06        6
OPEN            E4CB      58571
OPENFCB         E4D0      58576
PATTRN1         E728      59176
PATTRN2         EC00      60416
PLINE           E4A7      58535
PLINE2          E4AC      58540
PLIST          =FA0F      64015
PRINT           E48C      58508
PRINTB          E492      58514
PUNCH          =FA12      64018
RDERR           E7DF      59359
RDERROR         E7D9      59353
RDREC           E4F9      58617
READ           =FA27      64039
READER         =FA15      64021
READFCB         E4FE      58622
RENAM           E50E      58638
RENAME          EA10      59920
RENAME1         EA3F      59967
RENAME2         EA59      59993
RENAME3         EA5E      59998
RENAME4         EA6D      60013
RENAME5         EA73      60019
RENAME6         EA79      60025
RESDSK          E4B8      58552
RESETDR         E866      59494
RTNCODE         EBEE      60398
SAVE            E9AD      59821
SAVE1           E9D4      59860
SAVE2           E9F1      59889
SAVE3           E9FB      59899
SAVE4           EA01      59905
SEARCH          E72E      59182
SEARCH1         E733      59187
SEARCH2         E73C      59196
SEARCH3         E74F      59215
SEARCH4         E754      59220
SECTRN         =FA30      64048
SELDSK         =FA1B      64027
SETCDRV         E51A      58650
SETDMA         =FA24      64036
SETSEC         =FA21      64033
SETTRK         =FA1E      64030
SPACE           E4A2      58530
SRCHFCB         E4E9      58601
SRCHFST         E4DF      58591
SRCHNXT         E4E4      58596
STDDMA          E5D5      58837
SYNERR          E609      58889
SYNERR1         E60F      58895
SYNERR2         E622      58914
TAB            =09        9
TBASE          = 100      256
TBUFF          =80        128
TDRIVE         =04        4
TFCB           =5C        92
TYPE            E95D      59741
TYPE1           E974      59764
TYPE2           E977      59767
TYPE3           E987      59783
TYPE4           E9A0      59808
TYPE5           E9A7      59815
UNKNOWN         EAA5      60069
UNKWN0          EB71      60273
UNKWN1          EAC4      60100
UNKWN2          EACD      60109
UNKWN3          EAE1      60129
UNKWN4          EB01      60161
UNKWN5          EB30      60208
UNKWN6          EB3E      60222
UNKWN7          EB43      60227
UNKWN8          EB4F      60239
UNKWN9          EB6B      60267
UPPER           E530      58672
USER            EA8E      60046
VERIFY          E5F5      58869
VERIFY1         E5FD      58877
WBOOT          =FA03      64003
WRITE          =FA2A      64042
WRTREC          E504      58628
YESNO           E952      59730
_CCPEND        =EC00      60416
_FCB            EBCD      60365
